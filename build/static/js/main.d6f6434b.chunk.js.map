{"version":3,"sources":["parse-data.js","App.js","reportWebVitals.js","index.js"],"names":["courseSeasonDict","stringParse","string","remainder","result","count","charAt","substr","generateCourseNode","subjectCode","catalogNumber","courseSeasons","courseData","classData","course","Object","keys","symCourseSeasons","map","letter","join","courseNodeDescription","title","id","description","requirementsDescription","courseNodeTitle","courseNode","label","labelHighLightBold","borderWidth","font","face","size","multi","nodes","shapeProperties","borderRadius","properties","updateCourseNode","color","background","border","highlight","shape","fixed","generateCourseEdge","subjectCodePrereq","catalogNumberPrereq","from","to","arrows","inherit","parseMyClassNodeData","myClassDataDict","c","split","parseMyClassEdgeData","parsedEdgeData","code","concat","prereqCode","AddCourseForm","props","handleInputChange","e","target","value","includes","filter","x","setState","handleSubmit","doFunctionAfterSubmitManual","state","loadClassDataFile","doFunctionAfterSubmitCSV","makePreview","Container","fluid","err","coursePrereqs","bind","Form","Group","Label","Control","type","placeholder","onChange","this","Button","variant","onClick","File","React","Component","ExportClassData","doFunction","App","highlightEdgesConnectedToNode","nodeid","revertEdgesToNormal","addCourse","newnode","newedges","cp","newcourse","console","log","classDataDict","graph","edges","rest","loadCoursesFromData","filein","files","CSVParse","download","skipEmptyLines","complete","results","i","data","row","exportClassDataAsCSV","cid","ExportToCsv","fieldSeparator","filename","generateCsv","events","select","deselectNode","options","layout","hierarchical","enabled","sortMethod","shakeTowards","direction","nodeSpacing","levelSeparation","physics","minVelocity","maxVelocity","hierarchicalRepulsion","centralGravity","Row","Col","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6f6434b.chunk.js","sourcesContent":["// makes class data using the json class data object instead of the\r\n// user defined csv\r\n\r\nimport classData from './classData.json';\r\n\r\n// const classData = readFileSync('./classData.json');\r\n\r\n// load classData from file\r\n// const classData = JSON.parse(fs.readFileSync('./data/classData.json').toString());\r\n\r\nconst courseSeasonDict = {\r\n    'F': \"üçÅ\",\r\n    'W': \"‚ùÑÔ∏è\",\r\n    'S': \"üå∑\",\r\n}\r\n\r\n// stringParse(string): takes in a single \"line\" string, parses it; \r\n// ie includes \\n characters every ~50 characters for brevity \r\nfunction stringParse(string) {\r\n    let remainder = string;\r\n    let result = \"\";\r\n    let count = 0; // count: number of chars on the line\r\n\r\n    while (true) {\r\n        if (remainder === \"\") return result;\r\n\r\n        if (count > 50 && remainder.charAt(0) === \" \") {\r\n            result += \"\\n\";\r\n            remainder = remainder.substr(1);\r\n            count = 0;\r\n        }\r\n\r\n        result += remainder.charAt(0);\r\n        remainder = remainder.substr(1);\r\n        count++;\r\n    }\r\n}\r\n\r\n// generateCourseNode: takes in parameters, generates node for course\r\n// that can be used in make-graph.js\r\nfunction generateCourseNode(subjectCode, catalogNumber, courseSeasons) {\r\n\r\n    let courseData = classData[subjectCode][catalogNumber];\r\n    let course = courseData[Object.keys(courseData)[0]];\r\n    // get course seasons\r\n    let symCourseSeasons = courseSeasons\r\n        .map((letter) => { return courseSeasonDict[letter]; })\r\n        .join('');\r\n\r\n    // console.log(courseSeasons);\r\n    // console.log(courseData[Object.keys(courseData)[0]]);\r\n\r\n    const courseNodeDescription =\r\n        `${subjectCode} ${catalogNumber} (${course.title})\\nCourse ID: ${course.id}\\n--------------------------\\n${stringParse(course.description)}\\n--------------------------\\n${(course.requirementsDescription === null) ? \"\" : stringParse(course.requirementsDescription)}\\n`;\r\n    // console.log(courseNodeDescription);\r\n    const courseNodeTitle = (subjectCode === \"HS\") ? subjectCode : `${subjectCode} ${catalogNumber} ${symCourseSeasons}`;\r\n    // console.log(courseNodeTitle);\r\n\r\n    // we can experiment with popups instead of hovering when\r\n    // the node is clicked\r\n    var courseNode = {\r\n        id: `${subjectCode} ${catalogNumber}`,\r\n        label: courseNodeTitle,\r\n        title: courseNodeDescription,\r\n        labelHighLightBold: true,\r\n        borderWidth: 1.5,\r\n        font: {\r\n            face: 'Lato',\r\n            size: 16,\r\n            multi: 'html',\r\n        },\r\n        nodes: {\r\n\r\n        },\r\n        shapeProperties: {\r\n            borderRadius: 2.5,\r\n        }\r\n    }\r\n\r\n    // function to update properties of course node\r\n    let updateCourseNode = function (courseNode, properties) {\r\n        return { ...courseNode, ...properties };\r\n    }\r\n\r\n    // we could make this into a switch statement, or even use a csv\r\n    // to store the properties\r\n    let colorShapeProperties = {};\r\n    // console.log(courseSubject);\r\n    if (subjectCode === \"MATH\") { // green\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#169131',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#81f087',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'diamond',\r\n            size: 15,\r\n        };\r\n    }\r\n    else if (subjectCode === \"STAT\") { // yellow\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#d5db16',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#f7fa8c',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'hexagon',\r\n            size: 15,\r\n        }\r\n    }\r\n    else if (subjectCode === \"CS\") { // orange\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#eb7c28',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#edb68c',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'star',\r\n            size: 15,\r\n        };\r\n    }\r\n    else if (subjectCode === \"CO\") { // aqua\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#0ebfc2',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#63e8eb',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'triangleDown',\r\n            size: 12,\r\n        };\r\n    }\r\n    else if (subjectCode === \"PMATH\") { // pink\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#d40dc0',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#f294e9',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'dot',\r\n            size: 12,\r\n        }\r\n    }\r\n    else if (subjectCode === \"HS\") { // blue\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: 'blue',\r\n                border: 'black',\r\n            },\r\n            shape: 'dot',\r\n            size: 8,\r\n            fixed: true,\r\n        }\r\n    }\r\n    else if (subjectCode === \"SPCOM\" || subjectCode === \"ENGL\") { // purple\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#661499',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#c578f5',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'triangle',\r\n            size: 12,\r\n        }\r\n    }\r\n    else { // red\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#a30b2c',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#e66e88',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'square',\r\n            size: 12,\r\n        };\r\n    }\r\n\r\n    courseNode = updateCourseNode(courseNode, colorShapeProperties);\r\n\r\n    return courseNode;\r\n}\r\n\r\n// generateCourseEdge: generates course edge from a prereq\r\n// course node of the course to the original course\r\nfunction generateCourseEdge(subjectCode, catalogNumber, subjectCodePrereq, catalogNumberPrereq) {\r\n    const courseEdge = {\r\n        id: `${subjectCodePrereq} ${catalogNumberPrereq} -> ${subjectCode} ${catalogNumber}`,\r\n        title: `${subjectCodePrereq} ${catalogNumberPrereq} -> ${subjectCode} ${catalogNumber}`,\r\n        from: `${subjectCodePrereq} ${catalogNumberPrereq}`,\r\n        to: `${subjectCode} ${catalogNumber}`,\r\n        arrows: 'to',\r\n        color: {\r\n            color: '#bdbdbd',\r\n            inherit: 'from',\r\n        },\r\n    }\r\n    return courseEdge;\r\n}\r\n\r\n// parseMyClassNodeData: parses my (ie given) class data, returns list of nodes corresponding to them\r\n// myClassDataDict is in the form { <course code>: { prereqs: <list of course prereqs>, seasons: <list of seasons> } }\r\n// where <course code> = `<subject code> <catalog number>`\r\nfunction parseMyClassNodeData(myClassDataDict) {\r\n    return Object.keys(myClassDataDict).map((c) => {\r\n        return generateCourseNode(c.split(\" \")[0], c.split(\" \")[1], myClassDataDict[c]['seasons']);\r\n    })\r\n}\r\n// parseMyClassEdgeData: parses my (ie given) class data, returns list of nodes corresponding\r\n// to myClassDataDict, which is in the form described above\r\nfunction parseMyClassEdgeData(myClassDataDict) {\r\n    let parsedEdgeData = [];\r\n    for (let code in myClassDataDict) {\r\n        parsedEdgeData = parsedEdgeData.concat(myClassDataDict[code]['prereqs']\r\n            .map((prereqCode) => {\r\n                return generateCourseEdge(\r\n                    code.split(\" \")[0],\r\n                    code.split(\" \")[1],\r\n                    prereqCode.split(\" \")[0],\r\n                    prereqCode.split(\" \")[1]\r\n                )\r\n            }));\r\n    }\r\n    return parsedEdgeData;\r\n}\r\n\r\n// console.log(parseMyClassEdgeData({\"MATH 135\": [], \"MATH 136\": [\"MATH 135\"], \"MATH 237\": [\"MATH 135\", \"MATH 136\"]}));\r\n\r\nexport { generateCourseNode, generateCourseEdge, parseMyClassEdgeData, parseMyClassNodeData };","// Constructs the React Application\r\n\r\nimport { ExportToCsv } from \"export-to-csv\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport Graph from \"react-graph-vis\";\r\nimport { parse as CSVParse } from \"papaparse\";\r\n\r\nimport classData from './classData.json';\r\nimport { generateCourseNode, generateCourseEdge, parseMyClassEdgeData, parseMyClassNodeData } from './parse-data.js';\r\nimport { colorLuminance } from './lighten-color.js';\r\n\r\n// options for vis graph\r\n// const options = {\r\n//   layout: {\r\n//     hierarchical: {\r\n//       enabled: true,\r\n//       sortMethod: 'directed',\r\n//       shakeTowards: 'roots',\r\n//       direction: 'LR',\r\n//       nodeSpacing: 300,\r\n//       levelSeparation: 400,\r\n//     },\r\n//     randomSeed: '0.5650852741192154:1612598600483',\r\n//   },\r\n//   nodes: {\r\n//     font: {\r\n//       multi: 'html',\r\n//     },\r\n//   }\r\n// };\r\n\r\n// React component for \"Add Course\" sidebar\r\nclass AddCourseForm extends React.Component {\r\n\r\n  // constructor for add course form\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      subjectCode: \"\",\r\n      catalogNumber: \"\",\r\n      courseSeasons: [],\r\n      coursePrereqs: [],\r\n    }\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  // updates state based on changes to inputs\r\n  handleInputChange = (e) => {\r\n    const target = e.target;\r\n    const value = [\"subjectCode\", \"catalogNumber\"].includes(target.value)\r\n      ? target.value\r\n      : target.value.split(\";\").filter(x => x);\r\n    this.setState({\r\n      [target.id]: value\r\n    });\r\n  }\r\n\r\n  // for the section where user adds course data manually\r\n  handleSubmit = () => this.props.doFunctionAfterSubmitManual(this.state);\r\n\r\n  // for the section where user adds course data using a csv\r\n  loadClassDataFile = this.props.doFunctionAfterSubmitCSV;\r\n\r\n  // makes preview of course\r\n  makePreview = (subjectCode, catalogNumber) => {\r\n    try {\r\n      // return generateCourseNode(subjectCode, catalogNumber, courseSeasons).title;\r\n      let courseData = classData[subjectCode][catalogNumber];\r\n      let course = courseData[Object.keys(courseData)[0]];\r\n      return (\r\n        <Container fluid>\r\n          <h6>{subjectCode} {catalogNumber} ({course.title})</h6>\r\n          <p>Course ID: {course.id}</p>\r\n          <p>{course.description}</p>\r\n          <p>{course.requirementsDescription}</p>\r\n        </Container>\r\n      )\r\n    } catch (err) {\r\n      return \"Invalid course data; please check that all input fields are formatted correctly\";\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h4>Add Course</h4>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label>Subject Code</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id=\"subjectCode\"\r\n              placeholder=\"e.g. MATH\"\r\n              onChange={(e) => this.setState({ subjectCode: e.target.value })}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Catalog Number</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id=\"catalogNumber\"\r\n              placeholder=\"e.g. 239\"\r\n              onChange={(e) => this.setState({ catalogNumber: e.target.value })}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Course preview</Form.Label>\r\n            <br />\r\n            {this.makePreview(this.state.subjectCode, this.state.catalogNumber)}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Seasons course offered</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id=\"courseSeasons\"\r\n              placeholder=\"e.g. F;W;S\"\r\n              onChange={(e) => this.setState({ courseSeasons: e.target.value.split(\";\") })}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Course Prerequisites</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id=\"coursePrereqs\"\r\n              placeholder=\"e.g. MATH 136;MATH 138\"\r\n              onChange={(e) => this.setState({ coursePrereqs: e.target.value.split(\";\") })}\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" onClick={this.handleSubmit}>Add Course</Button>\r\n          <Form.Group>\r\n            <Form.Label>Or alternatively, import class data via a CSV:</Form.Label>\r\n            <Form.File\r\n              id=\"classDataFile\"\r\n              onChange={this.loadClassDataFile}\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n// React Component to export class data as CSV\r\nclass ExportClassData extends React.Component {\r\n\r\n  doFunction = this.props.doFunction;\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Button variant=\"primary\" onClick={this.doFunction}>\r\n          Export Class Data as CSV\r\n        </Button>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n// React Component for the graph (ie \"My Network\")\r\nclass App extends React.Component {\r\n\r\n  // initial dict for class data\r\n  myClassDataDict = {\r\n    // test data\r\n    // \"MATH 135\": { \"prereqs\": [], \"seasons\": [\"F\", \"W\", \"S\"] },\r\n    // \"MATH 136\": { \"prereqs\": [\"MATH 135\"], \"seasons\": [\"F\", \"W\", \"S\"] },\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      classDataDict: this.myClassDataDict,\r\n      graph: {\r\n        nodes: parseMyClassNodeData(this.myClassDataDict),\r\n        edges: parseMyClassEdgeData(this.myClassDataDict),\r\n      },\r\n      events: {\r\n        // when selecting a node, \"highlight\" the edges connected to it\r\n        select: ({ nodes, edges }) => {\r\n          this.highlightEdgesConnectedToNode(nodes[0]);\r\n        },\r\n        // when deselecting a node, \"revert\" the \"selected\" edges to \"normal\"\r\n        deselectNode: ({ ...other }) => {\r\n          this.revertEdgesToNormal();\r\n        },\r\n        // stabilized: ({ iterations }) => {\r\n        //   console.log(iterations);\r\n        //   this.setState(({options, ...rest}) => {\r\n        //     return {\r\n        //       options,\r\n        //       ...rest\r\n        //     }\r\n        //   })\r\n        // }\r\n      },\r\n      options: {\r\n        layout: {\r\n          hierarchical: {\r\n            enabled: true,\r\n            sortMethod: 'directed',\r\n            shakeTowards: 'roots',\r\n            direction: 'LR',\r\n            nodeSpacing: 150,\r\n            levelSeparation: 280,\r\n          },\r\n        },\r\n        nodes: {\r\n          font: {\r\n            multi: 'html',\r\n          },\r\n        },\r\n        // physics: false,\r\n        physics: {\r\n          enabled: true,\r\n          minVelocity: 0.05,\r\n          maxVelocity: 30,\r\n          hierarchicalRepulsion: {\r\n            centralGravity: 1,\r\n          },\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  // highlightEdgesConnectedToNode: highlights edges connected to node (when it is clicked)\r\n  highlightEdgesConnectedToNode = (nodeid) => {\r\n\r\n    // we do nothing for now, since I do not know how to make the simulation\r\n    // \"stop\" when I click the node\r\n\r\n    // // luminosity constants for how dark/light to make the edges when node clicked\r\n    // const fromLum = -0.4;\r\n    // const toLum = 0;\r\n\r\n    // this.setState(({ options, graph: { nodes, edges }, ...rest }) => {\r\n    //   // get clickedNode based on nodeid (match node id with nodeid)\r\n    //   let clickedNode = nodes.filter((node) => (node.id === nodeid))[0];\r\n    //   // get edges connected to clickedNode, and the \"other\" edges not connected to clickedNode\r\n    //   let fromEdges = edges.filter((edge) => (edge.from === nodeid));\r\n    //   let toEdges = edges.filter((edge) => (edge.to === nodeid));\r\n    //   let otherEdges = edges.filter((edge) => !((edge.to === nodeid) || (edge.from === nodeid)));\r\n    //   // color outgoing and incoming arrows\r\n    //   return {\r\n    //     options,\r\n    //     graph: {\r\n    //       nodes,\r\n    //       edges: otherEdges\r\n    //         .concat(fromEdges.map((fromEdge) => {\r\n    //           return {\r\n    //             ...fromEdge,\r\n    //             width: 2,\r\n    //             color: colorLuminance(clickedNode.color.background, fromLum),\r\n    //           }\r\n    //         }))\r\n    //         .concat(toEdges.map((toEdge) => {\r\n    //           return {\r\n    //             ...toEdge,\r\n    //             width: 2,\r\n    //             color: colorLuminance(clickedNode.color.background, toLum),\r\n    //           }\r\n    //         })),\r\n    //     },\r\n    //     ...rest\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  // revert edges back to normal (ie turn them all back to light grey)\r\n  revertEdgesToNormal = () => {\r\n\r\n    // we do nothing for now, since I do not know how to make the simulation\r\n    // \"stop\" when I click the node\r\n\r\n    // this.setState(({ graph: { nodes, edges }, ...rest }) => {\r\n    //   return {\r\n    //     graph:\r\n    //     {\r\n    //       nodes,\r\n    //       edges: edges.map((edge) => {\r\n    //         return {\r\n    //           ...edge, \r\n    //           color: '#bdbdbd',\r\n    //           width: 1,\r\n    //         }\r\n    //       })\r\n    //     },\r\n    //     ...rest\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  // add course when \"Add Course\" button clicked\r\n  addCourse = (state) => {\r\n    const { subjectCode, catalogNumber, courseSeasons, coursePrereqs } = state;\r\n    const newnode = generateCourseNode(subjectCode, catalogNumber, courseSeasons);\r\n    const newedges = coursePrereqs.map((cp) => generateCourseEdge(subjectCode, catalogNumber, cp.split(\" \")[0], cp.split(\" \")[1]));\r\n    const newcourse = { [subjectCode + \" \" + catalogNumber]: { \"seasons\": courseSeasons, \"prereqs\": coursePrereqs } };\r\n    console.log(newcourse);\r\n    this.setState(({ classDataDict, graph: { nodes, edges }, ...rest }) => {\r\n      return {\r\n        classDataDict: {\r\n          ...classDataDict,\r\n          ...newcourse\r\n        },\r\n        graph: {\r\n          nodes: [\r\n            ...nodes,\r\n            newnode\r\n          ],\r\n          edges: [\r\n            ...edges,\r\n            ...newedges\r\n          ],\r\n        },\r\n        ...rest\r\n      };\r\n    });\r\n  };\r\n\r\n  // load course data when CSV with class data is uploaded\r\n  loadCoursesFromData = (e) => {\r\n    let filein = e.target.files[0];\r\n    CSVParse(filein, {\r\n      download: true,\r\n      skipEmptyLines: true,\r\n      complete: (results) => {\r\n        this.myClassDataDict = {};\r\n        for (let i in results.data) {\r\n          let row = results.data[i];\r\n          if (typeof row[0] !== 'undefined') {\r\n            this.myClassDataDict[`${row[0]} ${row[1]}`] = {\r\n              'seasons': row[2].split(\";\").filter(x => x),\r\n              'prereqs': row[3].split(\";\").filter(x => x),\r\n            };\r\n          }\r\n        }\r\n        console.log(this.myClassDataDict);\r\n        this.setState(({ classDataDict, graph: { nodes, edges }, ...rest }) => {\r\n          return {\r\n            classDataDict: this.myClassDataDict,\r\n            graph: {\r\n              nodes: parseMyClassNodeData(this.myClassDataDict),\r\n              edges: parseMyClassEdgeData(this.myClassDataDict),\r\n            },\r\n            ...rest\r\n          }\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  exportClassDataAsCSV = () => {\r\n    console.log(this.state.classDataDict);\r\n    const data = Object.keys(this.state.classDataDict)\r\n      .map((cid) => [\r\n        cid.split(\" \")[0],\r\n        cid.split(\" \")[1],\r\n        this.state.classDataDict[cid][\"seasons\"].join(\";\"),\r\n        this.state.classDataDict[cid][\"prereqs\"].join(\";\")\r\n      ]);\r\n\r\n    console.log(data);\r\n    const csvExporter = new ExportToCsv({\r\n      fieldSeparator: ',',\r\n      filename: 'classData',\r\n      title: 'Class Data',\r\n    });\r\n    csvExporter.generateCsv(data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container id=\"App\">\r\n        <h1 id=\"heading\">My Course Graph</h1>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={8}>\r\n              <Container id=\"mynetwork\">\r\n                <Graph graph={this.state.graph} options={this.state.options} events={this.state.events} />\r\n              </Container>\r\n              {/* <MyNetwork /> */}\r\n            </Col>\r\n            <Col lg={4}>\r\n              <AddCourseForm\r\n                doFunctionAfterSubmitManual={this.addCourse}\r\n                doFunctionAfterSubmitCSV={this.loadCoursesFromData}\r\n              />\r\n              <ExportClassData\r\n                doFunction={this.exportClassDataAsCSV}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}