{"version":3,"sources":["config.js","get-course-data.js","parse-data.js","AddCourseForm.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","APIKEY","URL","a","axios","headers","subjectCode","termcode","getCurrentTermData","getCourseWithTermCode","catalogNumber","getCourse","then","result","data","termCode","courseSeasonDict","stringParse","string","remainder","count","charAt","substr","generateCourseNode","course","courseSeasons","symCourseSeasons","map","letter","join","courseNodeDescription","title","id","description","requirementsDescription","courseNodeTitle","nodeAcadGroupsConfig","acadGroupsConfig","associatedAcademicGroupCode","acadOrgsConfig","associatedAcademicOrgCode","label","basicNodeConfig","subjectCodesConfig","shape","icon","face","weight","color","code","String","fromCharCode","size","parseMyClassNodeData","myClassDataDict","gcs","Promise","all","Object","keys","split","courseList","seasons","courseDataList","courseData","parseMyClassEdgeData","parsedEdgeData","concat","prereqCode","subjectCodePrereq","catalogNumberPrereq","from","to","arrows","inherit","console","log","SubjectCodeInput","props","state","subjectCodes","setState","sort","subjectA","subjectB","localeCompare","catch","err","Form","Control","as","onChange","this","updateSubjectCodeFn","name","subject","value","React","Component","CatalogNumberInput","makeOption","listOfCourses","prevProps","courseA","courseB","updateCatalogNumberFn","CoursePreview","undefined","Button","readOnly","variant","DropdownButton","Dropdown","ItemText","CourseSeasonsInput","ToggleButtonGroup","type","updateCourseSeasonsFn","ToggleButton","inline","CoursePrerequisitesInput","placeholder","updateCoursePrereqFn","AddCourseButton","chosenSubjectCode","chosenCatalogNumber","onClick","handleSubmit","AddCourseForm","handleInputChange","e","target","includes","filter","x","doFunctionAfterSubmitManual","loadClassDataFile","doFunctionAfterSubmitCSV","coursePrereqs","bind","Container","Group","Label","trim","File","ExportClassData","doFunction","App","highlightEdgesConnectedToNode","nodeid","revertEdgesToNormal","addCourse","newcourse","classDataDict","graph","rest","nodes","edges","loadCoursesFromData","filein","files","CSVParse","download","skipEmptyLines","complete","results","i","row","exportClassDataAsCSV","cid","ExportToCsv","fieldSeparator","filename","generateCsv","events","select","deselectNode","options","layout","hierarchical","enabled","sortMethod","shakeTowards","direction","nodeSpacing","levelSeparation","font","multi","physics","minVelocity","maxVelocity","hierarchicalRepulsion","centralGravity","prevState","snapshot","length","fluid","Row","Col","lg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70cf3ddc.chunk.js","sourcesContent":["module.exports = {\r\n    APIKEY : \"DBDD4D4D485940C0825CB9F485CE70C3\" \r\n}\r\n","// // helper functions to retrieve course data using the UW API\r\n\r\nimport * as axios from 'axios';\r\nimport {APIKEY} from \"./config\";\r\n\r\nconst URL = \"https://openapi.data.uwaterloo.ca/v3\";\r\n\r\n// // getSubjectList(): gets lists of subjects directly from the UW API\r\n// // subjects have: code, name, descAbbr, desc and associated academic code\r\n// // callback takes in the result of the promise\r\nexport async function getSubjectList() {\r\n    return axios.get(`${URL}/subjects`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getListOfCourses: returns promise containing data of all the courses\r\n// // with subjectCode \"subjectCode\"\r\n// // see commented code for example usage\r\n// // example: // getListOfCourses(\"MATH\", 1211);\r\n// // callback takes in the result of the promise\r\nexport async function getListOfCourses(subjectCode, termcode) {\r\n    return axios.get(`${URL}/Courses/${termcode}/${subjectCode}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getTermData: returns term data\r\n// // callback takes in the result of the promise\r\nexport async function getTermData(callback) {\r\n    return axios.get(`${URL}/Terms`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getTermData: returns term data for a term code\r\n// // callback takes in the result of the promise\r\nexport async function getSpecificTermData(termcode) {\r\n    return axios.get(`${URL}/Terms/${termcode}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getCurrentTermData: returns term data for current term\r\n// // callback takes in the result of the promise\r\nexport async function getCurrentTermData() {\r\n    return axios.get(`${URL}/Terms/current`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getCurrentYearTermData: returns term data for current year\r\n// // contains the terms S, F, W in that order\r\n// // callback takes in the result of the promise\r\nexport async function getTermDataForYear(year) {\r\n    return axios.get(`${URL}/Terms/foracademicyear/${year}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getCourse: returns *promise* containing data of course with\r\n// // courseCode = subjectCode + \" \" + catalogNumber, and termcode \"termcode\"\r\n// // example usage: // getCourse(\"MATH\", \"135\", \"1211);\r\n// // callback takes in the result of the promise\r\nexport async function getCourseWithTermCode(subjectCode, catalogNumber, termcode) {\r\n    return axios.get(`${URL}/Courses/${termcode}/${subjectCode}/${catalogNumber}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// get list of academic organizations\r\nexport async function getListAcadOrgs() {\r\n    return axios.get(`${URL}/AcademicOrganizations`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\nexport async function getCourse(subjectCode, catalogNumber) {\r\n    return getCurrentTermData().then((result) => {\r\n        return result.data.termCode;\r\n    }).then((termCode) => {\r\n        return getCourseWithTermCode(subjectCode, catalogNumber, termCode);\r\n    })\r\n}\r\n\r\n// // getListOfCoursesWithoutTermCode: returns list of courses corresponding to subjectCode\r\n// export async function getListOfCoursesWithoutTermCode(subjectCode, callback) {\r\n//     getCurrentTermData((result) => getListOfCoursesWithoutTermCode(subjectCode, result.data.termCode, callback));\r\n// }\r\n\r\n// // getCourse: returns *promise* containing data of course with\r\n// // courseCode = subjectCode + \" \" + catalogNumber, and termcode \"termcode\"\r\n// // example usage: // getCourse(\"MATH\", \"135\", \"1211);\r\n// // callback takes in the result of the promise\r\n// export async function getCourseWithoutTermCode(subjectCode, catalogNumber, callback) {\r\n//     getCurrentTermData((result) => getCourseWithTermCode(subjectCode, catalogNumber, result.data.termCode, callback));\r\n// }\r\n\r\n// // getClassSchedule: gets \"class schedule\" for course\r\n// // callback takes in the result of the promise\r\nexport async function getClassSchedule(subjectCode, catalogNumber, termcode) {\r\n    return axios.get(`${URL}/ClassSchedules/${termcode}/${subjectCode}/${catalogNumber}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getNumberOfEnrolledStudents: gets number of enrolled students in course\r\n// // callback takes in the number of enrolled students as a parameter\r\n// // callback takes in the result of the promise\r\n// export async function getNumberOfEnrolledStudents(subjectCode, catalogNumber, termcode, callback) {\r\n//     getClassSchedule(subjectCode, catalogNumber, termcode, (result) => {\r\n//         callback(result.data\r\n//             .map((course) => course.enrolledStudents)\r\n//             .reduce((a, b) => a + b));\r\n//     })\r\n// }\r\n\r\n// // getNumberOfEnrolledStudents(\"MATH\", \"135\", \"1209\", console.log)\r\n\r\n\r\n","// makes class data using the json class data object instead of the\r\n// user defined csv\r\n\r\nimport * as gcs from './get-course-data.js';\r\n\r\nimport basicNodeConfig from './config/basicNodeConfig.json';\r\nimport acadGroupsConfig from './config/academicGroupsConfig.json';\r\nimport acadOrgsConfig from './config/academicOrganizationsConfig.json';\r\nimport subjectCodesConfig from './config/subjectCodesConfig.json';\r\n\r\n// const classData = readFileSync('./classData.json');\r\n\r\n// load classData from file\r\n// const classData = JSON.parse(fs.readFileSync('./data/classData.json').toString());\r\n\r\n// getCourseDetails: get details of course from classData\r\n\r\nconst courseSeasonDict = {\r\n    'F': \"🍁\",\r\n    'W': \"❄️\",\r\n    'S': \"🌷\",\r\n}\r\n\r\n// stringParse(string): takes in a single \"line\" string, parses it; \r\n// ie includes \\n characters every ~50 characters for brevity \r\nfunction stringParse(string) {\r\n    let remainder = string;\r\n    let result = \"\";\r\n    let count = 0; // count: number of chars on the line\r\n\r\n    while (true) {\r\n        if (remainder === \"\") return result;\r\n\r\n        if (count > 50 && remainder.charAt(0) === \" \") {\r\n            result += \"\\n\";\r\n            remainder = remainder.substr(1);\r\n            count = 0;\r\n        }\r\n\r\n        result += remainder.charAt(0);\r\n        remainder = remainder.substr(1);\r\n        count++;\r\n    }\r\n}\r\n\r\n// generateCourseNode: takes in courseData and courseSeasons,\r\n// outputs a node object\r\nfunction generateCourseNode(course, courseSeasons) {\r\n\r\n    let symCourseSeasons = courseSeasons\r\n        .map((letter) => courseSeasonDict[letter])\r\n        .join('');\r\n\r\n    // console.log(courseSeasons);\r\n    // console.log(courseData[Object.keys(courseData)[0]]);\r\n\r\n    const courseNodeDescription =\r\n        `${course.subjectCode} ${course.catalogNumber} (${course.title})\\nCourse ID: ${course.id}\\n--------------------------\\n${stringParse(course.description)}\\n--------------------------\\n${(course.requirementsDescription === null) ? \"\" : stringParse(course.requirementsDescription)}\\n`;\r\n    // console.log(courseNodeDescription);\r\n    const courseNodeTitle = `${course.subjectCode} ${course.catalogNumber} ${symCourseSeasons}`;\r\n    // console.log(courseNodeTitle);\r\n\r\n    // \"set up\" unicode for courseNode acadGroups and acadOrgs configs\r\n    const nodeAcadGroupsConfig = acadGroupsConfig[course.associatedAcademicGroupCode][\"symbolcode\"];\r\n    const nodeAcadOrgsConfig = acadOrgsConfig[course.associatedAcademicOrgCode][\"symbolcode\"];\r\n    // we can experiment with popups instead of hovering when\r\n    // the node is clicked\r\n    var courseNode = {\r\n        id: `${course.subjectCode} ${course.catalogNumber}`,\r\n        label: courseNodeTitle,\r\n        title: courseNodeDescription,\r\n        ...basicNodeConfig,\r\n        ...subjectCodesConfig[course.subjectCode],\r\n        ...((typeof nodeAcadGroupsConfig === \"undefined\")\r\n            ? {}\r\n            : {\r\n                shape: 'icon',\r\n                icon: {\r\n                    face: \"'Font Awesome 5 Free'\",\r\n                    weight: '700',\r\n                    color: subjectCodesConfig[course.subjectCode][\"color\"][\"background\"],\r\n                    // convert hexadecimal string to unicode\r\n                    code: String.fromCharCode(\"0x\" + nodeAcadGroupsConfig),\r\n                    size: 40,\r\n                }\r\n            }),\r\n    }\r\n\r\n    return courseNode;\r\n}\r\n\r\n// generateCourseEdge: generates course edge from a prereq\r\n// course node of the course to the original course\r\nfunction generateCourseEdge(subjectCode, catalogNumber, subjectCodePrereq, catalogNumberPrereq) {\r\n    const courseEdge = {\r\n        id: `${subjectCodePrereq} ${catalogNumberPrereq} -> ${subjectCode} ${catalogNumber}`,\r\n        title: `${subjectCodePrereq} ${catalogNumberPrereq} -> ${subjectCode} ${catalogNumber}`,\r\n        from: `${subjectCodePrereq} ${catalogNumberPrereq}`,\r\n        to: `${subjectCode} ${catalogNumber}`,\r\n        arrows: 'to',\r\n        color: {\r\n            color: '#bdbdbd',\r\n            inherit: 'from',\r\n        },\r\n    }\r\n    return courseEdge;\r\n}\r\n\r\n// parseMyClassNodeData: parses my (ie given) class data, returns list of nodes corresponding to them\r\n// myClassDataDict is in the form { <course code>: { prereqs: <list of course prereqs>, seasons: <list of seasons> } }\r\n// where <course code> = `<subject code> <catalog number>`\r\nasync function parseMyClassNodeData(myClassDataDict) {\r\n    return gcs.getCurrentTermData()\r\n        .then((result) => {\r\n            return Promise.all(\r\n                Object.keys(myClassDataDict)\r\n                    .map((course) => gcs.getCourseWithTermCode(\r\n                        course.split(\" \")[0],\r\n                        course.split(\" \")[1],\r\n                        result.data.termCode\r\n                    ))\r\n            );\r\n        })\r\n        .then((courseList) => {\r\n            return courseList\r\n                .map((course) => {\r\n                    let courseData = course.data[0];\r\n                    let courseSeasons = myClassDataDict[`${course.data[0].subjectCode} ${course.data[0].catalogNumber}`].seasons;\r\n                    return { data: courseData, seasons: courseSeasons };\r\n                });\r\n        })\r\n        .then((courseDataList) => {\r\n            return courseDataList.map((courseData) => generateCourseNode(courseData.data, courseData.seasons));\r\n        });\r\n}\r\n\r\nparseMyClassNodeData({\r\n    \"MATH 135\": { \"prereqs\": [], \"seasons\": ['F', 'W', 'S'] },\r\n    \"MATH 136\": { \"prereqs\": [\"MATH 135\"], \"seasons\": ['F', 'W', 'S'] }\r\n}).then(console.log);\r\n\r\n// parseMyClassEdgeData: parses my (ie given) class data, returns list of nodes corresponding\r\n// to myClassDataDict, which is in the form described above\r\n// this function is synchronous\r\nfunction parseMyClassEdgeData(myClassDataDict) {\r\n    let parsedEdgeData = [];\r\n    for (let code in myClassDataDict) {\r\n        parsedEdgeData = parsedEdgeData.concat(myClassDataDict[code]['prereqs']\r\n            .map((prereqCode) => {\r\n                return generateCourseEdge(\r\n                    code.split(\" \")[0],\r\n                    code.split(\" \")[1],\r\n                    prereqCode.split(\" \")[0],\r\n                    prereqCode.split(\" \")[1]\r\n                )\r\n            }));\r\n    }\r\n    return parsedEdgeData;\r\n}\r\n\r\n// console.log(parseMyClassEdgeData({\"MATH 135\": [], \"MATH 136\": [\"MATH 135\"], \"MATH 237\": [\"MATH 135\", \"MATH 136\"]}));\r\n\r\nexport { courseSeasonDict, generateCourseNode, generateCourseEdge, parseMyClassEdgeData, parseMyClassNodeData };","import React from 'react';\r\nimport { Container, Form, Button, DropdownButton, Dropdown, ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\r\nimport { courseSeasonDict } from \"./parse-data.js\";\r\nimport * as gcs from './get-course-data.js';\r\n\r\n// React component for dropdown menu for \"subject code\"\r\nclass SubjectCodeInput extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { subjectCodes: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        gcs.getSubjectList()\r\n            .then((result) => {\r\n                this.setState({\r\n                    subjectCodes: result.data\r\n                        .sort((subjectA, subjectB) => subjectA.code.localeCompare(subjectB.code)),\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                as=\"select\"\r\n                size=\"md\"\r\n                id=\"subjectCode\"\r\n                onChange={this.props.updateSubjectCodeFn}\r\n            >\r\n                {\r\n                    // put empty code:name pair in the dropdown menu\r\n                    [{ code: \"\", name: \"\" }, ...this.state.subjectCodes]\r\n                        // format options\r\n                        .map((subject) =>\r\n                            <option value={subject.code}>{subject.code} - {subject.name}</option>\r\n                        )\r\n                }\r\n            </Form.Control>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for dropdown menu for \"catalog number\", which is\r\n// based on the subjectCode chosen\r\nclass CatalogNumberInput extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            subjectCode: \"\",\r\n            listOfCourses: [],\r\n        }\r\n    }\r\n\r\n    makeOption = (catalogNumber, title) => {\r\n        return <option value={catalogNumber}>\r\n            {catalogNumber} - {title}\r\n        </option>\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.subjectCode !== \"\" && this.props.subjectCode !== prevProps.subjectCode) {\r\n            gcs.getCurrentTermData()\r\n                .then((result) => {\r\n                    return result.data.termCode;\r\n                })\r\n                .then((termCode) => {\r\n                    return gcs.getListOfCourses(this.props.subjectCode, termCode);\r\n                })\r\n                .then((result) => {\r\n                    let listOfCourses = result.data\r\n                        .map((course) => {\r\n                            return {\r\n                                catalogNumber: course.catalogNumber,\r\n                                title: course.title,\r\n                            };\r\n                        })\r\n                        .sort((courseA, courseB) => courseA.catalogNumber.localeCompare(courseB.catalogNumber));\r\n                    this.setState({\r\n                        listOfCourses: listOfCourses\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                as=\"select\"\r\n                size=\"md\"\r\n                id=\"catalogNumber\"\r\n                onChange={this.props.updateCatalogNumberFn}\r\n            >\r\n                {\r\n                    this.state.listOfCourses\r\n                        // sort by catalogNumber\r\n                        .sort((courseA, courseB) => courseA.catalogNumber - courseB.catalogNumber)\r\n                        // make the option objects\r\n                        .map((course) => this.makeOption(course.catalogNumber, course.title))\r\n                }\r\n            </Form.Control >\r\n        )\r\n    }\r\n}\r\n\r\n// React component for dropdown menu for \"course preview\", which shows a\r\n// preview of the course\r\nclass CoursePreview extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            courseData: undefined\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.subjectCode !== this.props.subjectCode || prevProps.catalogNumber !== this.props.catalogNumber) {\r\n            gcs.getCourse(this.props.subjectCode, this.props.catalogNumber)\r\n                .then((result) => {\r\n                    this.setState(() => {\r\n                        return {\r\n                            courseData: result.data\r\n                        }\r\n                    })\r\n                })\r\n                .catch((err) => {\r\n                    this.setState(() => {\r\n                        return {\r\n                            courseData: undefined\r\n                        }\r\n                    })\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (typeof this.state.courseData === 'undefined') {\r\n            return (\r\n                <Button\r\n                    readOnly={true}\r\n                    variant=\"secondary\"\r\n                >\r\n                    Unable to provide a course preview\r\n                </Button>\r\n            )\r\n        }\r\n        return (\r\n            <DropdownButton\r\n                title=\"Click me to see a preview of the course\"\r\n                variant=\"info\"\r\n            >\r\n\r\n                <Dropdown.ItemText>\r\n                    <h5>{this.props.subjectCode} {this.props.catalogNumber}</h5>\r\n                    <h5>{this.state.courseData.title}</h5>\r\n                    <p>Course ID: {this.state.courseData.id}</p>\r\n                    <h5>Description</h5>\r\n                    <p>{this.state.courseData.description}</p>\r\n                    <h5>Requirements</h5>\r\n                    <p>{this.state.courseData.requirementsDescription}</p>\r\n                </Dropdown.ItemText>\r\n            </DropdownButton>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for course seasons\r\nclass CourseSeasonsInput extends React.Component {\r\n    render() {\r\n        return (\r\n            <ToggleButtonGroup\r\n                type=\"checkbox\"\r\n                onChange={this.props.updateCourseSeasonsFn}\r\n            >\r\n                {\r\n                    Object.keys(courseSeasonDict)\r\n                        .map((letter) =>\r\n                            <ToggleButton\r\n                                inline\r\n                                value={letter}\r\n                                variant=\"light\"\r\n                            >\r\n                                {courseSeasonDict[letter]}\r\n                            </ToggleButton>)\r\n                }\r\n            </ToggleButtonGroup>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for course prerequisites\r\nclass CoursePrerequisitesInput extends React.Component {\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                type=\"text\"\r\n                id=\"coursePrereqs\"\r\n                placeholder=\"e.g. MATH 136;MATH 138\"\r\n                onChange={this.props.updateCoursePrereqFn}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n// React component for \"Add Course\" button\r\nclass AddCourseButton extends React.Component {\r\n    render() {\r\n        if ((this.props.chosenSubjectCode === \"\") || (this.props.chosenCatalogNumber === \"\")) {\r\n            return (\r\n                <Button\r\n                    variant=\"secondary\"\r\n                >\r\n                    Add Course\r\n                </Button>\r\n            )\r\n        }\r\n        return (\r\n            <Button\r\n                variant=\"primary\"\r\n                onClick={this.props.handleSubmit}\r\n            >\r\n                Add Course\r\n            </Button>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for \"Add Course\" sidebar\r\nclass AddCourseForm extends React.Component {\r\n\r\n    // constructor for add course form\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            subjectCode: \"\",\r\n            catalogNumber: \"\",\r\n            courseSeasons: [],\r\n            coursePrereqs: [],\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    // updates state based on changes to inputs\r\n    handleInputChange = (e) => {\r\n        const target = e.target;\r\n        const value = [\"subjectCode\", \"catalogNumber\"].includes(target.value)\r\n            ? target.value\r\n            : target.value.split(\";\").filter(x => x);\r\n        this.setState({\r\n            [target.id]: value\r\n        });\r\n    }\r\n\r\n    // for the section where user adds course data manually\r\n    handleSubmit = () => this.props.doFunctionAfterSubmitManual(this.state);\r\n\r\n    // for the section where user adds course data using a csv\r\n    loadClassDataFile = this.props.doFunctionAfterSubmitCSV;\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <h4>Add Course</h4>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Subject Code</Form.Label>\r\n                        <SubjectCodeInput\r\n                            updateSubjectCodeFn={(e) => this.setState({ subjectCode: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Catalog Number</Form.Label>\r\n                        <CatalogNumberInput\r\n                            subjectCode={this.state.subjectCode}\r\n                            updateCatalogNumberFn={(e) => this.setState({ catalogNumber: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <CoursePreview\r\n                            subjectCode={this.state.subjectCode}\r\n                            catalogNumber={this.state.catalogNumber}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Seasons course offered</Form.Label>\r\n                        <CourseSeasonsInput\r\n                            updateCourseSeasonsFn={(seasons) => this.setState({ courseSeasons: seasons })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Course Prerequisites</Form.Label>\r\n                        <CoursePrerequisitesInput\r\n                            updateCoursePrereqFn={(e) => this.setState({\r\n                                coursePrereqs: e.target.value\r\n                                    .split(\";\")\r\n                                    .map((course) => course.trim())\r\n                            })}\r\n                        />\r\n                    </Form.Group>\r\n                    <AddCourseButton\r\n                        chosenSubjectCode={this.state.subjectCode}\r\n                        chosenCatalogNumber={this.state.catalogNumber}\r\n                        handleSubmit={() => this.props.doFunctionAfterSubmitManual(this.state)}\r\n                    />\r\n                    <Form.Group>\r\n                        <Form.Label>Or alternatively, import class data via a CSV:</Form.Label>\r\n                        <Form.File\r\n                            id=\"classDataFile\"\r\n                            onChange={this.loadClassDataFile}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddCourseForm;","// Constructs the React Application\r\n\r\nimport { ExportToCsv } from \"export-to-csv\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport Graph from \"react-graph-vis\";\r\nimport { parse as CSVParse } from \"papaparse\";\r\n\r\nimport AddCourseForm from './AddCourseForm';\r\n\r\nimport { parseMyClassEdgeData, parseMyClassNodeData } from './parse-data.js';\r\n// import { colorLuminance } from './lighten-color.js';\r\nimport { getCourse } from \"./get-course-data\";\r\n\r\n// import {} from \"./create-node-options\";\r\n\r\n// React Component to export class data as CSV\r\nclass ExportClassData extends React.Component {\r\n\r\n  doFunction = this.props.doFunction;\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Button variant=\"primary\" onClick={this.doFunction}>\r\n          Export Class Data as CSV\r\n        </Button>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n// React Component for the graph (ie \"My Network\")\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      classDataDict: {\r\n        // test data (if needed)\r\n        \"MATH 135\": { \"prereqs\": [], \"seasons\": ['F', 'W', 'S'] },\r\n        \"MATH 136\": { \"prereqs\": [\"MATH 135\"], \"seasons\": ['F', 'W', 'S'] }\r\n      },\r\n      graph: {\r\n        nodes: [],\r\n        edges: []\r\n      },\r\n      events: {\r\n        // when selecting a node, \"highlight\" the edges connected to it\r\n        select: ({ nodes, edges }) => {\r\n          this.highlightEdgesConnectedToNode(nodes[0]);\r\n        },\r\n        // when deselecting a node, \"revert\" the \"selected\" edges to \"normal\"\r\n        deselectNode: ({ ...other }) => {\r\n          this.revertEdgesToNormal();\r\n        },\r\n        // stabilized: ({ iterations }) => {\r\n        //   console.log(iterations);\r\n        //   this.setState(({options, ...rest}) => {\r\n        //     return {\r\n        //       options,\r\n        //       ...rest\r\n        //     }\r\n        //   })\r\n        // }\r\n      },\r\n      options: {\r\n        layout: {\r\n          hierarchical: {\r\n            enabled: true,\r\n            sortMethod: 'directed',\r\n            shakeTowards: 'roots',\r\n            direction: 'LR',\r\n            nodeSpacing: 150,\r\n            levelSeparation: 280,\r\n          },\r\n        },\r\n        nodes: {\r\n          font: {\r\n            multi: 'html',\r\n          },\r\n        },\r\n        // physics: false,\r\n        physics: {\r\n          enabled: true,\r\n          minVelocity: 0.05,\r\n          maxVelocity: 30,\r\n          hierarchicalRepulsion: {\r\n            centralGravity: 1,\r\n          },\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    parseMyClassNodeData(this.state.classDataDict).then((nodes) => {\r\n      this.setState(({ graph, ...rest }) => {\r\n        return {\r\n          graph: {\r\n            nodes: nodes,\r\n            edges: parseMyClassEdgeData(this.state.classDataDict),\r\n          },\r\n          ...rest\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevState.classDataDict.length === this.state.classDataDict.length) {\r\n      parseMyClassNodeData(this.state.classDataDict).then((nodes) => {\r\n        this.setState(({ graph, ...rest }) => {\r\n          return {\r\n            graph: {\r\n              nodes: nodes,\r\n              edges: parseMyClassEdgeData(this.state.classDataDict),\r\n            },\r\n            ...rest\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // highlightEdgesConnectedToNode: highlights edges connected to node (when it is clicked)\r\n  highlightEdgesConnectedToNode = (nodeid) => {\r\n\r\n    // we do nothing for now, since I do not know how to make the simulation\r\n    // \"stop\" when I click the node\r\n\r\n    // // luminosity constants for how dark/light to make the edges when node clicked\r\n    // const fromLum = -0.4;\r\n    // const toLum = 0;\r\n\r\n    // this.setState(({ options, graph: { nodes, edges }, ...rest }) => {\r\n    //   // get clickedNode based on nodeid (match node id with nodeid)\r\n    //   let clickedNode = nodes.filter((node) => (node.id === nodeid))[0];\r\n    //   // get edges connected to clickedNode, and the \"other\" edges not connected to clickedNode\r\n    //   let fromEdges = edges.filter((edge) => (edge.from === nodeid));\r\n    //   let toEdges = edges.filter((edge) => (edge.to === nodeid));\r\n    //   let otherEdges = edges.filter((edge) => !((edge.to === nodeid) || (edge.from === nodeid)));\r\n    //   // color outgoing and incoming arrows\r\n    //   return {\r\n    //     options,\r\n    //     graph: {\r\n    //       nodes,\r\n    //       edges: otherEdges\r\n    //         .concat(fromEdges.map((fromEdge) => {\r\n    //           return {\r\n    //             ...fromEdge,\r\n    //             width: 2,\r\n    //             color: colorLuminance(clickedNode.color.background, fromLum),\r\n    //           }\r\n    //         }))\r\n    //         .concat(toEdges.map((toEdge) => {\r\n    //           return {\r\n    //             ...toEdge,\r\n    //             width: 2,\r\n    //             color: colorLuminance(clickedNode.color.background, toLum),\r\n    //           }\r\n    //         })),\r\n    //     },\r\n    //     ...rest\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  // revert edges back to normal (ie turn them all back to light grey)\r\n  revertEdgesToNormal = () => {\r\n\r\n    // we do nothing for now, since I do not know how to make the simulation\r\n    // \"stop\" when I click the node\r\n\r\n    // this.setState(({ graph: { nodes, edges }, ...rest }) => {\r\n    //   return {\r\n    //     graph:\r\n    //     {\r\n    //       nodes,\r\n    //       edges: edges.map((edge) => {\r\n    //         return {\r\n    //           ...edge, \r\n    //           color: '#bdbdbd',\r\n    //           width: 1,\r\n    //         }\r\n    //       })\r\n    //     },\r\n    //     ...rest\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  // add course when \"Add Course\" button clicked\r\n  addCourse = (state) => {\r\n    const { subjectCode, catalogNumber, courseSeasons, coursePrereqs } = state;\r\n    getCourse(subjectCode, catalogNumber).then((result) => {\r\n      const newcourse = { [subjectCode + \" \" + catalogNumber]: { \"seasons\": courseSeasons, \"prereqs\": coursePrereqs } };\r\n      this.setState(({ classDataDict, graph: { nodes, edges }, ...rest }) => {\r\n        return {\r\n          classDataDict: {\r\n            ...classDataDict,\r\n            ...newcourse\r\n          },\r\n          ...rest\r\n        };\r\n      });\r\n    });\r\n  };\r\n\r\n  // load course data when CSV with class data is uploaded\r\n  loadCoursesFromData = (e) => {\r\n    let filein = e.target.files[0];\r\n    CSVParse(filein, {\r\n      download: true,\r\n      skipEmptyLines: true,\r\n      complete: (results) => {\r\n        this.myClassDataDict = {};\r\n        for (let i in results.data) {\r\n          let row = results.data[i];\r\n          if (typeof row[0] !== 'undefined') {\r\n            this.myClassDataDict[`${row[0]} ${row[1]}`] = {\r\n              'seasons': row[2].split(\";\").filter(x => x),\r\n              'prereqs': row[3].split(\";\").filter(x => x),\r\n            };\r\n          }\r\n        }\r\n        this.setState(({ classDataDict, ...rest }) => {\r\n          return {\r\n            classDataDict: this.myClassDataDict,\r\n            ...rest\r\n          }\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  // export class data in CSV format\r\n  exportClassDataAsCSV = () => {\r\n    const data = Object.keys(this.state.classDataDict)\r\n      .map((cid) => [\r\n        cid.split(\" \")[0],\r\n        cid.split(\" \")[1],\r\n        this.state.classDataDict[cid][\"seasons\"].join(\";\"),\r\n        this.state.classDataDict[cid][\"prereqs\"].join(\";\")\r\n      ]);\r\n\r\n    const csvExporter = new ExportToCsv({\r\n      fieldSeparator: ',',\r\n      filename: 'classData',\r\n      title: 'Class Data',\r\n    });\r\n    csvExporter.generateCsv(data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container id=\"App\">\r\n        <h1 id=\"heading\">My Course Graph</h1>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={8}>\r\n              <Container id=\"mynetwork\">\r\n                <Graph graph={this.state.graph} options={this.state.options} events={this.state.events} />\r\n              </Container>\r\n              {/* <MyNetwork /> */}\r\n            </Col>\r\n            <Col lg={4}>\r\n              <AddCourseForm\r\n                doFunctionAfterSubmitManual={this.addCourse}\r\n                doFunctionAfterSubmitCSV={this.loadCoursesFromData}\r\n              />\r\n              <ExportClassData\r\n                doFunction={this.exportClassDataAsCSV}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}