{"version":3,"sources":["config/config.js","components/get-course-data.js","components/parse-data.js","components/AddCourseForm.js","components/CourseDescription.js","components/App.js","reportWebVitals.js","index.js"],"names":["module","exports","APIKEY","URL","a","axios","headers","subjectCode","termcode","getCurrentTermData","getCourseWithTermCode","catalogNumber","getCourse","then","result","data","termCode","courseSeasonDict","generateCourseNode","course","courseSeasons","symCourseSeasons","map","letter","join","courseNodeTitle","nodeAcadGroupsConfig","acadGroupsConfig","associatedAcademicGroupCode","nodeAcadOrgsConfig","acadOrgsConfig","associatedAcademicOrgCode","id","label","basicNodeConfig","subjectCodesConfig","shape","icon","face","weight","color","code","String","fromCharCode","size","parseMyClassNodeData","myClassDataDict","gcs","Promise","all","Object","keys","split","courseList","seasons","courseDataList","courseData","parseMyClassEdgeData","parsedEdgeData","concat","prereqCode","subjectCodePrereq","catalogNumberPrereq","title","from","to","arrows","inherit","SubjectCodeInput","props","state","subjectCodes","setState","sort","subjectA","subjectB","localeCompare","catch","err","console","log","Form","Control","as","onChange","this","updateSubjectCodeFn","name","subject","value","React","Component","CatalogNumberInput","makeOption","listOfCourses","prevProps","courseA","courseB","updateCatalogNumberFn","CoursePreview","undefined","Button","readOnly","variant","DropdownButton","Dropdown","ItemText","courseId","description","requirementsDescription","CourseSeasonsInput","ToggleButtonGroup","type","updateCourseSeasonsFn","ToggleButton","inline","CoursePrerequisitesInput","placeholder","updateCoursePrereqFn","AddCourseButton","chosenSubjectCode","chosenCatalogNumber","onClick","handleSubmit","AddCourseForm","handleInputChange","e","target","includes","filter","x","doFunctionAfterSubmitManual","loadClassDataFile","doFunctionAfterSubmitCSV","coursePrereqs","bind","Container","Group","Label","trim","File","CourseDescription","classDataDict","length","lg","Row","Col","makePrereqs","ExportClassData","doFunction","App","highlightEdgesConnectedToNode","nodeid","revertEdgesToNormal","addCourse","newcourse","graph","rest","nodes","edges","loadCoursesFromData","filein","files","CSVParse","download","skipEmptyLines","complete","results","i","row","exportClassDataAsCSV","cid","ExportToCsv","fieldSeparator","filename","generateCsv","clicked","node","edge","events","select","deselectNode","options","layout","hierarchical","enabled","sortMethod","shakeTowards","direction","nodeSpacing","levelSeparation","font","multi","physics","minVelocity","maxVelocity","hierarchicalRepulsion","centralGravity","prevState","snapshot","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c30bc8a.chunk.js","sourcesContent":["module.exports = {\r\n    APIKEY : \"DBDD4D4D485940C0825CB9F485CE70C3\" \r\n}\r\n","// // helper functions to retrieve course data using the UW API\r\n\r\nimport * as axios from 'axios';\r\nimport {APIKEY} from \"../config/config\";\r\n\r\nconst URL = \"https://openapi.data.uwaterloo.ca/v3\";\r\n\r\n// // getSubjectList(): gets lists of subjects directly from the UW API\r\n// // subjects have: code, name, descAbbr, desc and associated academic code\r\n// // callback takes in the result of the promise\r\nexport async function getSubjectList() {\r\n    return axios.get(`${URL}/subjects`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getListOfCourses: returns promise containing data of all the courses\r\n// // with subjectCode \"subjectCode\"\r\n// // see commented code for example usage\r\n// // example: // getListOfCourses(\"MATH\", 1211);\r\n// // callback takes in the result of the promise\r\nexport async function getListOfCourses(subjectCode, termcode) {\r\n    return axios.get(`${URL}/Courses/${termcode}/${subjectCode}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getTermData: returns term data\r\n// // callback takes in the result of the promise\r\nexport async function getTermData(callback) {\r\n    return axios.get(`${URL}/Terms`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getTermData: returns term data for a term code\r\n// // callback takes in the result of the promise\r\nexport async function getSpecificTermData(termcode) {\r\n    return axios.get(`${URL}/Terms/${termcode}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getCurrentTermData: returns term data for current term\r\n// // callback takes in the result of the promise\r\nexport async function getCurrentTermData() {\r\n    return axios.get(`${URL}/Terms/current`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getCurrentYearTermData: returns term data for current year\r\n// // contains the terms S, F, W in that order\r\n// // callback takes in the result of the promise\r\nexport async function getTermDataForYear(year) {\r\n    return axios.get(`${URL}/Terms/foracademicyear/${year}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getCourse: returns *promise* containing data of course with\r\n// // courseCode = subjectCode + \" \" + catalogNumber, and termcode \"termcode\"\r\n// // example usage: // getCourse(\"MATH\", \"135\", \"1211);\r\n// // callback takes in the result of the promise\r\nexport async function getCourseWithTermCode(subjectCode, catalogNumber, termcode) {\r\n    return axios.get(`${URL}/Courses/${termcode}/${subjectCode}/${catalogNumber}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// get list of academic organizations\r\nexport async function getListAcadOrgs() {\r\n    return axios.get(`${URL}/AcademicOrganizations`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\nexport async function getCourse(subjectCode, catalogNumber) {\r\n    return getCurrentTermData().then((result) => {\r\n        return result.data.termCode;\r\n    }).then((termCode) => {\r\n        return getCourseWithTermCode(subjectCode, catalogNumber, termCode);\r\n    })\r\n}\r\n\r\n// // getListOfCoursesWithoutTermCode: returns list of courses corresponding to subjectCode\r\n// export async function getListOfCoursesWithoutTermCode(subjectCode, callback) {\r\n//     getCurrentTermData((result) => getListOfCoursesWithoutTermCode(subjectCode, result.data.termCode, callback));\r\n// }\r\n\r\n// // getCourse: returns *promise* containing data of course with\r\n// // courseCode = subjectCode + \" \" + catalogNumber, and termcode \"termcode\"\r\n// // example usage: // getCourse(\"MATH\", \"135\", \"1211);\r\n// // callback takes in the result of the promise\r\n// export async function getCourseWithoutTermCode(subjectCode, catalogNumber, callback) {\r\n//     getCurrentTermData((result) => getCourseWithTermCode(subjectCode, catalogNumber, result.data.termCode, callback));\r\n// }\r\n\r\n// // getClassSchedule: gets \"class schedule\" for course\r\n// // callback takes in the result of the promise\r\nexport async function getClassSchedule(subjectCode, catalogNumber, termcode) {\r\n    return axios.get(`${URL}/ClassSchedules/${termcode}/${subjectCode}/${catalogNumber}`, { headers: { \"X-API-KEY\": APIKEY } });\r\n}\r\n\r\n// // getNumberOfEnrolledStudents: gets number of enrolled students in course\r\n// // callback takes in the number of enrolled students as a parameter\r\n// // callback takes in the result of the promise\r\n// export async function getNumberOfEnrolledStudents(subjectCode, catalogNumber, termcode, callback) {\r\n//     getClassSchedule(subjectCode, catalogNumber, termcode, (result) => {\r\n//         callback(result.data\r\n//             .map((course) => course.enrolledStudents)\r\n//             .reduce((a, b) => a + b));\r\n//     })\r\n// }\r\n\r\n// // getNumberOfEnrolledStudents(\"MATH\", \"135\", \"1209\", console.log)\r\n\r\n\r\n","// makes class data using the json class data object instead of the\r\n// user defined csv\r\n\r\nimport * as gcs from './get-course-data.js';\r\n\r\nimport basicNodeConfig from '../config/basicNodeConfig.json';\r\nimport acadGroupsConfig from '../config/academicGroupsConfig.json';\r\nimport acadOrgsConfig from '../config/academicOrganizationsConfig.json';\r\nimport subjectCodesConfig from '../config/subjectCodesConfig.json';\r\n\r\n// const classData = readFileSync('./classData.json');\r\n\r\n// load classData from file\r\n// const classData = JSON.parse(fs.readFileSync('./data/classData.json').toString());\r\n\r\n// getCourseDetails: get details of course from classData\r\n\r\nconst courseSeasonDict = {\r\n    'F': \"🍁\",\r\n    'W': \"❄️\",\r\n    'S': \"🌷\",\r\n}\r\n\r\n// stringParse(string): takes in a single \"line\" string, parses it; \r\n// ie includes \\n characters every ~50 characters for brevity \r\nfunction stringParse(string) {\r\n    let remainder = string;\r\n    let result = \"\";\r\n    let count = 0; // count: number of chars on the line\r\n\r\n    while (true) {\r\n        if (remainder === \"\") return result;\r\n\r\n        if (count > 50 && remainder.charAt(0) === \" \") {\r\n            result += \"\\n\";\r\n            remainder = remainder.substr(1);\r\n            count = 0;\r\n        }\r\n\r\n        result += remainder.charAt(0);\r\n        remainder = remainder.substr(1);\r\n        count++;\r\n    }\r\n}\r\n\r\n// generateCourseNode: takes in courseData and courseSeasons,\r\n// outputs a node object\r\nfunction generateCourseNode(course, courseSeasons) {\r\n\r\n    let symCourseSeasons = courseSeasons\r\n        .map((letter) => courseSeasonDict[letter])\r\n        .join('');\r\n    \r\n    // title for course node\r\n    const courseNodeTitle = `${course.subjectCode} ${course.catalogNumber} ${symCourseSeasons}`;\r\n\r\n    // \"set up\" unicode for courseNode acadGroups and acadOrgs configs\r\n    const nodeAcadGroupsConfig = acadGroupsConfig[course.associatedAcademicGroupCode][\"symbolcode\"];\r\n    const nodeAcadOrgsConfig = acadOrgsConfig[course.associatedAcademicOrgCode][\"symbolcode\"];\r\n\r\n    var courseNode = {\r\n        id: `${course.subjectCode} ${course.catalogNumber}`,\r\n        label: courseNodeTitle,\r\n        // configurations for \"generic\" default basic node\r\n        ...basicNodeConfig,\r\n        // configurations for subject code\r\n        ...subjectCodesConfig[course.subjectCode],\r\n        // configurations for academic group\r\n        ...((typeof nodeAcadGroupsConfig === \"undefined\")\r\n            ? {}\r\n            : {\r\n                shape: 'icon',\r\n                icon: {\r\n                    face: \"'Font Awesome 5 Free'\",\r\n                    weight: '700',\r\n                    color: subjectCodesConfig[course.subjectCode][\"color\"][\"background\"],\r\n                    // convert hexadecimal string to unicode\r\n                    code: String.fromCharCode(\"0x\" + nodeAcadGroupsConfig),\r\n                    size: 40,\r\n                }\r\n            }),\r\n        // configurations for academic organization\r\n        ...((nodeAcadOrgsConfig === \"f111\")\r\n            ? {}\r\n            : {\r\n                shape: 'icon',\r\n                icon: {\r\n                    face: \"'Font Awesome 5 Free'\",\r\n                    weight: '700',\r\n                    color: subjectCodesConfig[course.subjectCode][\"color\"][\"background\"],\r\n                    // convert hexadecimal string to unicode\r\n                    code: String.fromCharCode(\"0x\" + nodeAcadOrgsConfig),\r\n                    size: 40,\r\n                }\r\n            }),\r\n    }\r\n\r\n    return courseNode;\r\n}\r\n\r\n// generateCourseEdge: generates course edge from a prereq\r\n// course node of the course to the original course\r\nfunction generateCourseEdge(subjectCode, catalogNumber, subjectCodePrereq, catalogNumberPrereq) {\r\n    const courseEdge = {\r\n        id: `${subjectCodePrereq} ${catalogNumberPrereq} -> ${subjectCode} ${catalogNumber}`,\r\n        title: `${subjectCodePrereq} ${catalogNumberPrereq} -> ${subjectCode} ${catalogNumber}`,\r\n        from: `${subjectCodePrereq} ${catalogNumberPrereq}`,\r\n        to: `${subjectCode} ${catalogNumber}`,\r\n        arrows: 'to',\r\n        color: {\r\n            color: '#bdbdbd',\r\n            inherit: 'from',\r\n        },\r\n    }\r\n    return courseEdge;\r\n}\r\n\r\n// parseMyClassNodeData: parses my (ie given) class data, returns list of nodes corresponding to them\r\n// myClassDataDict is in the form { <course code>: { prereqs: <list of course prereqs>, seasons: <list of seasons> } }\r\n// where <course code> = `<subject code> <catalog number>`\r\nasync function parseMyClassNodeData(myClassDataDict) {\r\n    return gcs.getCurrentTermData()\r\n        .then((result) => {\r\n            return Promise.all(\r\n                Object.keys(myClassDataDict)\r\n                    .map((course) => gcs.getCourseWithTermCode(\r\n                        course.split(\" \")[0],\r\n                        course.split(\" \")[1],\r\n                        result.data.termCode\r\n                    ))\r\n            );\r\n        })\r\n        .then((courseList) => {\r\n            return courseList\r\n                .map((course) => {\r\n                    let courseData = course.data[0];\r\n                    let courseSeasons = myClassDataDict[`${course.data[0].subjectCode} ${course.data[0].catalogNumber}`].seasons;\r\n                    return { data: courseData, seasons: courseSeasons };\r\n                });\r\n        })\r\n        .then((courseDataList) => {\r\n            return courseDataList.map((courseData) => generateCourseNode(courseData.data, courseData.seasons));\r\n        });\r\n}\r\n\r\n// parseMyClassEdgeData: parses my (ie given) class data, returns list of nodes corresponding\r\n// to myClassDataDict, which is in the form described above\r\n// this function is synchronous\r\nfunction parseMyClassEdgeData(myClassDataDict) {\r\n    let parsedEdgeData = [];\r\n    for (let code in myClassDataDict) {\r\n        parsedEdgeData = parsedEdgeData.concat(myClassDataDict[code]['prereqs']\r\n            .map((prereqCode) => {\r\n                return generateCourseEdge(\r\n                    code.split(\" \")[0],\r\n                    code.split(\" \")[1],\r\n                    prereqCode.split(\" \")[0],\r\n                    prereqCode.split(\" \")[1]\r\n                )\r\n            }));\r\n    }\r\n    return parsedEdgeData;\r\n}\r\n\r\n// console.log(parseMyClassEdgeData({\"MATH 135\": [], \"MATH 136\": [\"MATH 135\"], \"MATH 237\": [\"MATH 135\", \"MATH 136\"]}));\r\n\r\nexport { courseSeasonDict, generateCourseNode, generateCourseEdge, parseMyClassEdgeData, parseMyClassNodeData };","import React from 'react';\r\nimport { Container, Form, Button, DropdownButton, Dropdown, ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\r\nimport { courseSeasonDict } from \"./parse-data.js\";\r\nimport * as gcs from './get-course-data.js';\r\n\r\n// React component for dropdown menu for \"subject code\"\r\nclass SubjectCodeInput extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { subjectCodes: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        gcs.getSubjectList()\r\n            .then((result) => {\r\n                this.setState({\r\n                    subjectCodes: result.data\r\n                        .sort((subjectA, subjectB) => subjectA.code.localeCompare(subjectB.code)),\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                as=\"select\"\r\n                size=\"md\"\r\n                id=\"subjectCode\"\r\n                onChange={this.props.updateSubjectCodeFn}\r\n            >\r\n                {\r\n                    // put empty code:name pair in the dropdown menu\r\n                    [{ code: \"\", name: \"\" }, ...this.state.subjectCodes]\r\n                        // format options\r\n                        .map((subject) =>\r\n                            <option value={subject.code}>{subject.code} - {subject.name}</option>\r\n                        )\r\n                }\r\n            </Form.Control>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for dropdown menu for \"catalog number\", which is\r\n// based on the subjectCode chosen\r\nclass CatalogNumberInput extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            subjectCode: \"\",\r\n            listOfCourses: [],\r\n        }\r\n    }\r\n\r\n    makeOption = (catalogNumber, title) => {\r\n        return <option value={catalogNumber}>\r\n            {catalogNumber} - {title}\r\n        </option>\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.subjectCode !== \"\" && this.props.subjectCode !== prevProps.subjectCode) {\r\n            gcs.getCurrentTermData()\r\n                .then((result) => {\r\n                    return result.data.termCode;\r\n                })\r\n                .then((termCode) => {\r\n                    return gcs.getListOfCourses(this.props.subjectCode, termCode);\r\n                })\r\n                .then((result) => {\r\n                    let listOfCourses = result.data\r\n                        .map((course) => {\r\n                            return {\r\n                                catalogNumber: course.catalogNumber,\r\n                                title: course.title,\r\n                            };\r\n                        })\r\n                        .sort((courseA, courseB) => courseA.catalogNumber.localeCompare(courseB.catalogNumber));\r\n                    this.setState({\r\n                        listOfCourses: listOfCourses\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                as=\"select\"\r\n                size=\"md\"\r\n                id=\"catalogNumber\"\r\n                onChange={this.props.updateCatalogNumberFn}\r\n            >\r\n                {\r\n                    this.state.listOfCourses\r\n                        // sort by catalogNumber\r\n                        .sort((courseA, courseB) => courseA.catalogNumber - courseB.catalogNumber)\r\n                        // make the option objects\r\n                        .map((course) => this.makeOption(course.catalogNumber, course.title))\r\n                }\r\n            </Form.Control >\r\n        )\r\n    }\r\n}\r\n\r\n// React component for dropdown menu for \"course preview\", which shows a\r\n// preview of the course\r\nclass CoursePreview extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            courseData: undefined\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.subjectCode !== this.props.subjectCode || prevProps.catalogNumber !== this.props.catalogNumber) {\r\n            gcs.getCourse(this.props.subjectCode, this.props.catalogNumber)\r\n                .then((result) => {\r\n                    this.setState(() => {\r\n                        return {\r\n                            courseData: result.data[0]\r\n                        }\r\n                    })\r\n                })\r\n                .catch((err) => {\r\n                    this.setState(() => {\r\n                        return {\r\n                            courseData: undefined\r\n                        }\r\n                    })\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (typeof this.state.courseData === 'undefined') {\r\n            return (\r\n                <Button\r\n                    readOnly={true}\r\n                    variant=\"secondary\"\r\n                >\r\n                    Unable to provide a course preview\r\n                </Button>\r\n            )\r\n        }\r\n        return (\r\n            <DropdownButton\r\n                title=\"Click me to see a preview of the course\"\r\n                variant=\"info\"\r\n            >\r\n\r\n                <Dropdown.ItemText>\r\n                    <h5>{this.props.subjectCode} {this.props.catalogNumber}</h5>\r\n                    <h5>{this.state.courseData.title}</h5>\r\n                    <p>Course ID: {this.state.courseData.courseId}</p>\r\n                    <h5>Description</h5>\r\n                    <p>{this.state.courseData.description}</p>\r\n                    <h5>Requirements</h5>\r\n                    <p>{this.state.courseData.requirementsDescription}</p>\r\n                </Dropdown.ItemText>\r\n            </DropdownButton>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for course seasons\r\nclass CourseSeasonsInput extends React.Component {\r\n    render() {\r\n        return (\r\n            <ToggleButtonGroup\r\n                type=\"checkbox\"\r\n                onChange={this.props.updateCourseSeasonsFn}\r\n            >\r\n                {\r\n                    Object.keys(courseSeasonDict)\r\n                        .map((letter) =>\r\n                            <ToggleButton\r\n                                inline\r\n                                value={letter}\r\n                                variant=\"light\"\r\n                            >\r\n                                {courseSeasonDict[letter]}\r\n                            </ToggleButton>)\r\n                }\r\n            </ToggleButtonGroup>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for course prerequisites\r\nclass CoursePrerequisitesInput extends React.Component {\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                type=\"text\"\r\n                id=\"coursePrereqs\"\r\n                placeholder=\"e.g. MATH 136;MATH 138\"\r\n                onChange={this.props.updateCoursePrereqFn}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n// React component for \"Add Course\" button\r\nclass AddCourseButton extends React.Component {\r\n    render() {\r\n        if ((this.props.chosenSubjectCode === \"\") || (this.props.chosenCatalogNumber === \"\")) {\r\n            return (\r\n                <Button\r\n                    variant=\"secondary\"\r\n                >\r\n                    Add Course\r\n                </Button>\r\n            )\r\n        }\r\n        return (\r\n            <Button\r\n                variant=\"primary\"\r\n                onClick={this.props.handleSubmit}\r\n            >\r\n                Add Course\r\n            </Button>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for \"Add Course\" sidebar\r\nclass AddCourseForm extends React.Component {\r\n\r\n    // constructor for add course form\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            subjectCode: \"\",\r\n            catalogNumber: \"\",\r\n            courseSeasons: [],\r\n            coursePrereqs: [],\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    // updates state based on changes to inputs\r\n    handleInputChange = (e) => {\r\n        const target = e.target;\r\n        const value = [\"subjectCode\", \"catalogNumber\"].includes(target.value)\r\n            ? target.value\r\n            : target.value.split(\";\").filter(x => x);\r\n        this.setState({\r\n            [target.id]: value\r\n        });\r\n    }\r\n\r\n    // for the section where user adds course data manually\r\n    handleSubmit = () => this.props.doFunctionAfterSubmitManual(this.state);\r\n\r\n    // for the section where user adds course data using a csv\r\n    loadClassDataFile = this.props.doFunctionAfterSubmitCSV;\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <h4>Add Course</h4>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Subject Code</Form.Label>\r\n                        <SubjectCodeInput\r\n                            updateSubjectCodeFn={(e) => this.setState({ subjectCode: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Catalog Number</Form.Label>\r\n                        <CatalogNumberInput\r\n                            subjectCode={this.state.subjectCode}\r\n                            updateCatalogNumberFn={(e) => this.setState({ catalogNumber: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <CoursePreview\r\n                            subjectCode={this.state.subjectCode}\r\n                            catalogNumber={this.state.catalogNumber}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Seasons course offered</Form.Label>\r\n                        <CourseSeasonsInput\r\n                            updateCourseSeasonsFn={(seasons) => this.setState({ courseSeasons: seasons })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Course Prerequisites</Form.Label>\r\n                        <CoursePrerequisitesInput\r\n                            updateCoursePrereqFn={(e) => this.setState({\r\n                                coursePrereqs: e.target.value\r\n                                    .split(\";\")\r\n                                    .map((course) => course.trim())\r\n                            })}\r\n                        />\r\n                    </Form.Group>\r\n                    <AddCourseButton\r\n                        chosenSubjectCode={this.state.subjectCode}\r\n                        chosenCatalogNumber={this.state.catalogNumber}\r\n                        handleSubmit={() => this.props.doFunctionAfterSubmitManual(this.state)}\r\n                    />\r\n                    <Form.Group>\r\n                        <Form.Label>Or alternatively, import class data via a CSV:</Form.Label>\r\n                        <Form.File\r\n                            id=\"classDataFile\"\r\n                            onChange={this.loadClassDataFile}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddCourseForm;","// React class for \"course description\" class\r\n// a menu that displays details about the course\r\n\r\nimport React from 'react';\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { courseSeasonDict } from \"./parse-data.js\";\r\nimport * as gcs from './get-course-data.js';\r\n\r\nexport default class CourseDescription extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            courseData: undefined,\r\n            courseSeasons: [],\r\n            coursePrereqs: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (typeof this.props.course !== \"undefined\") {\r\n            const [ subjectCode, catalogNumber ] = this.props.course.split(\" \");\r\n            gcs.getCourse(subjectCode, catalogNumber).then((result) => {\r\n                console.log(result.data[0]);\r\n                this.setState({\r\n                    courseData: result.data[0],\r\n                    courseSeasons: this.props.classDataDict[`${subjectCode} ${catalogNumber}`]['seasons'],\r\n                    coursePrereqs: this.props.classDataDict[`${subjectCode} ${catalogNumber}`]['prereqs'],\r\n                })\r\n                console.log(this.state);\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (typeof this.props.course !== \"undefined\" && this.props.course !== prevProps.course) {\r\n            const [ subjectCode, catalogNumber ] = this.props.course.split(\" \");\r\n            gcs.getCourse(subjectCode, catalogNumber).then((result) => {\r\n                this.setState({\r\n                    courseData: result.data[0],\r\n                    courseSeasons: this.props.classDataDict[`${subjectCode} ${catalogNumber}`]['seasons'],\r\n                    coursePrereqs: this.props.classDataDict[`${subjectCode} ${catalogNumber}`]['prereqs'],\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    makePrereqs() {\r\n        if (this.state.coursePrereqs.length === 0) {\r\n            return <p>This course has no prerequisites listed</p>\r\n        }\r\n        else {\r\n            return <p>{this.state.courseData.requirementsDescription}</p>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (typeof this.state.courseData === \"undefined\") {\r\n            return (\r\n                <Container lg={6}>\r\n                    <p>No course selected</p>\r\n                </Container>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <h3>{this.state.courseData.subjectCode} {this.state.courseData.catalogNumber} {this.state.courseSeasons.map((letter) => courseSeasonDict[letter])}</h3>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg={8}>\r\n                            <h4>{this.state.courseData.title}</h4>\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            <h4>Course ID: {this.state.courseData.courseId}</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <h5>Course Description</h5>\r\n                            <p>{this.state.courseData.description}</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <h5>Course Prerequisites/Antirequisites</h5>\r\n                            {this.makePrereqs()}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n}","// Constructs the React Application\r\n\r\nimport { ExportToCsv } from \"export-to-csv\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport Graph from \"react-graph-vis\";\r\nimport { parse as CSVParse } from \"papaparse\";\r\n\r\nimport AddCourseForm from './AddCourseForm';\r\nimport CourseDescription from './CourseDescription';\r\n\r\nimport { parseMyClassEdgeData, parseMyClassNodeData } from './parse-data.js';\r\n// import { colorLuminance } from './lighten-color.js';\r\nimport { getCourse } from \"./get-course-data\";\r\n\r\n// import {} from \"./create-node-options\";\r\n\r\n// React Component to export class data as CSV\r\nclass ExportClassData extends React.Component {\r\n\r\n  doFunction = this.props.doFunction;\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Button variant=\"primary\" onClick={this.doFunction}>\r\n          Export Class Data as CSV\r\n        </Button>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n// React Component for the graph (ie \"My Network\")\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      classDataDict: {\r\n        // test data (if needed)\r\n        \"MATH 135\": { \"prereqs\": [], \"seasons\": ['F', 'W', 'S'] },\r\n        \"MATH 136\": { \"prereqs\": [\"MATH 135\"], \"seasons\": ['F', 'W', 'S'] }\r\n      },\r\n      graph: {\r\n        nodes: [],\r\n        edges: []\r\n      },\r\n      clicked: {\r\n        node: undefined,\r\n        edge: undefined,\r\n      },\r\n      events: {\r\n        // when selecting a node, \"highlight\" the edges connected to it\r\n        select: ({ nodes, edges }) => {\r\n          this.setState(({clicked, ...rest}) => {\r\n            return {\r\n              clicked: {\r\n                node: nodes[0],\r\n                edge: edges[0],\r\n              },\r\n              ...rest\r\n            }\r\n          })\r\n          // this.highlightEdgesConnectedToNode(nodes[0]);\r\n        },\r\n        // when deselecting a node, \"revert\" the \"selected\" edges to \"normal\"\r\n        deselectNode: ({ ...other }) => {\r\n          this.setState(({clicked, ...rest}) => {\r\n            return {\r\n              clicked: {\r\n                node: undefined,\r\n                edge: undefined,\r\n              },\r\n              ...rest\r\n            }\r\n          })\r\n        },\r\n        // stabilized: ({ iterations }) => {\r\n        //   console.log(iterations);\r\n        //   this.setState(({options, ...rest}) => {\r\n        //     return {\r\n        //       options,\r\n        //       ...rest\r\n        //     }\r\n        //   })\r\n        // }\r\n      },\r\n      options: {\r\n        layout: {\r\n          hierarchical: {\r\n            enabled: true,\r\n            sortMethod: 'directed',\r\n            shakeTowards: 'roots',\r\n            direction: 'LR',\r\n            nodeSpacing: 150,\r\n            levelSeparation: 280,\r\n          },\r\n        },\r\n        nodes: {\r\n          font: {\r\n            multi: 'html',\r\n          },\r\n        },\r\n        // physics: false,\r\n        physics: {\r\n          enabled: true,\r\n          minVelocity: 0.05,\r\n          maxVelocity: 30,\r\n          hierarchicalRepulsion: {\r\n            centralGravity: 1,\r\n          },\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    parseMyClassNodeData(this.state.classDataDict).then((nodes) => {\r\n      this.setState(({ graph, ...rest }) => {\r\n        return {\r\n          graph: {\r\n            nodes: nodes,\r\n            edges: parseMyClassEdgeData(this.state.classDataDict),\r\n          },\r\n          ...rest\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevState.classDataDict.length === this.state.classDataDict.length) {\r\n      parseMyClassNodeData(this.state.classDataDict).then((nodes) => {\r\n        this.setState(({ graph, ...rest }) => {\r\n          return {\r\n            graph: {\r\n              nodes: nodes,\r\n              edges: parseMyClassEdgeData(this.state.classDataDict),\r\n            },\r\n            ...rest\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // highlightEdgesConnectedToNode: highlights edges connected to node (when it is clicked)\r\n  highlightEdgesConnectedToNode = (nodeid) => {\r\n\r\n    // we do nothing for now, since I do not know how to make the simulation\r\n    // \"stop\" when I click the node\r\n\r\n    // // luminosity constants for how dark/light to make the edges when node clicked\r\n    // const fromLum = -0.4;\r\n    // const toLum = 0;\r\n\r\n    // this.setState(({ options, graph: { nodes, edges }, ...rest }) => {\r\n    //   // get clickedNode based on nodeid (match node id with nodeid)\r\n    //   let clickedNode = nodes.filter((node) => (node.id === nodeid))[0];\r\n    //   // get edges connected to clickedNode, and the \"other\" edges not connected to clickedNode\r\n    //   let fromEdges = edges.filter((edge) => (edge.from === nodeid));\r\n    //   let toEdges = edges.filter((edge) => (edge.to === nodeid));\r\n    //   let otherEdges = edges.filter((edge) => !((edge.to === nodeid) || (edge.from === nodeid)));\r\n    //   // color outgoing and incoming arrows\r\n    //   return {\r\n    //     options,\r\n    //     graph: {\r\n    //       nodes,\r\n    //       edges: otherEdges\r\n    //         .concat(fromEdges.map((fromEdge) => {\r\n    //           return {\r\n    //             ...fromEdge,\r\n    //             width: 2,\r\n    //             color: colorLuminance(clickedNode.color.background, fromLum),\r\n    //           }\r\n    //         }))\r\n    //         .concat(toEdges.map((toEdge) => {\r\n    //           return {\r\n    //             ...toEdge,\r\n    //             width: 2,\r\n    //             color: colorLuminance(clickedNode.color.background, toLum),\r\n    //           }\r\n    //         })),\r\n    //     },\r\n    //     ...rest\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  // revert edges back to normal (ie turn them all back to light grey)\r\n  revertEdgesToNormal = () => {\r\n\r\n    // we do nothing for now, since I do not know how to make the simulation\r\n    // \"stop\" when I click the node\r\n\r\n    // this.setState(({ graph: { nodes, edges }, ...rest }) => {\r\n    //   return {\r\n    //     graph:\r\n    //     {\r\n    //       nodes,\r\n    //       edges: edges.map((edge) => {\r\n    //         return {\r\n    //           ...edge, \r\n    //           color: '#bdbdbd',\r\n    //           width: 1,\r\n    //         }\r\n    //       })\r\n    //     },\r\n    //     ...rest\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  // add course when \"Add Course\" button clicked\r\n  addCourse = (state) => {\r\n    const { subjectCode, catalogNumber, courseSeasons, coursePrereqs } = state;\r\n    getCourse(subjectCode, catalogNumber).then((result) => {\r\n      const newcourse = { [subjectCode + \" \" + catalogNumber]: { \"seasons\": courseSeasons, \"prereqs\": coursePrereqs } };\r\n      this.setState(({ classDataDict, graph: { nodes, edges }, ...rest }) => {\r\n        return {\r\n          classDataDict: {\r\n            ...classDataDict,\r\n            ...newcourse\r\n          },\r\n          ...rest\r\n        };\r\n      });\r\n    });\r\n  };\r\n\r\n  // load course data when CSV with class data is uploaded\r\n  loadCoursesFromData = (e) => {\r\n    let filein = e.target.files[0];\r\n    CSVParse(filein, {\r\n      download: true,\r\n      skipEmptyLines: true,\r\n      complete: (results) => {\r\n        this.myClassDataDict = {};\r\n        for (let i in results.data) {\r\n          let row = results.data[i];\r\n          if (typeof row[0] !== 'undefined') {\r\n            this.myClassDataDict[`${row[0]} ${row[1]}`] = {\r\n              'seasons': row[2].split(\";\").filter(x => x),\r\n              'prereqs': row[3].split(\";\").filter(x => x),\r\n            };\r\n          }\r\n        }\r\n        this.setState(({ classDataDict, ...rest }) => {\r\n          return {\r\n            classDataDict: this.myClassDataDict,\r\n            ...rest\r\n          }\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  // export class data in CSV format\r\n  exportClassDataAsCSV = () => {\r\n    const data = Object.keys(this.state.classDataDict)\r\n      .map((cid) => [\r\n        cid.split(\" \")[0],\r\n        cid.split(\" \")[1],\r\n        this.state.classDataDict[cid][\"seasons\"].join(\";\"),\r\n        this.state.classDataDict[cid][\"prereqs\"].join(\";\")\r\n      ]);\r\n\r\n    const csvExporter = new ExportToCsv({\r\n      fieldSeparator: ',',\r\n      filename: 'classData',\r\n      title: 'Class Data',\r\n    });\r\n    csvExporter.generateCsv(data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container id=\"App\" fluid>\r\n        <Row>\r\n          <Col>\r\n            <h1 id=\"website-heading\">My Course Graph</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col lg={8}>\r\n            <Container id=\"mynetwork\">\r\n              <Graph graph={this.state.graph} options={this.state.options} events={this.state.events} />\r\n            </Container>\r\n          </Col>\r\n          <Col lg={4}>\r\n            <AddCourseForm\r\n              doFunctionAfterSubmitManual={this.addCourse}\r\n              doFunctionAfterSubmitCSV={this.loadCoursesFromData}\r\n            />\r\n            <ExportClassData\r\n              doFunction={this.exportClassDataAsCSV}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col lg={9} id=\"course-description\">\r\n            <CourseDescription\r\n              classDataDict={this.state.classDataDict}\r\n              course={this.state.clicked.node}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}