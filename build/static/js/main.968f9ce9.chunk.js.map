{"version":3,"sources":["parse-data.js","AddCourseForm.js","App.js","reportWebVitals.js","index.js"],"names":["getCourseDetails","subjectCode","catalogNumber","classData","courseData","Object","keys","courseSeasonDict","stringParse","string","remainder","result","count","charAt","substr","generateCourseNode","courseSeasons","course","symCourseSeasons","map","letter","join","courseNodeDescription","title","id","description","requirementsDescription","courseNodeTitle","courseNode","label","labelHighLightBold","borderWidth","font","face","size","multi","nodes","shapeProperties","borderRadius","properties","updateCourseNode","color","background","border","highlight","shape","fixed","generateCourseEdge","subjectCodePrereq","catalogNumberPrereq","from","to","arrows","inherit","parseMyClassNodeData","myClassDataDict","c","split","parseMyClassEdgeData","parsedEdgeData","code","concat","prereqCode","SubjectCodeInput","Form","Control","as","onChange","this","props","updateSubjectCodeFn","sort","React","Component","CatalogNumberInput","makeOption","value","updateCatalogNumberFn","chosenSubjectCode","CoursePreview","courseDetails","Button","readOnly","variant","DropdownButton","Dropdown","ItemText","CourseSeasonsInput","ToggleButtonGroup","type","updateCourseSeasonsFn","ToggleButton","inline","CoursePrerequisitesInput","placeholder","updateCoursePrereqFn","AddCourseButton","chosenCatalogNumber","onClick","handleSubmit","AddCourseForm","handleInputChange","e","target","includes","filter","x","setState","doFunctionAfterSubmitManual","state","loadClassDataFile","doFunctionAfterSubmitCSV","makePreview","Container","fluid","err","coursePrereqs","bind","Group","Label","seasons","trim","File","ExportClassData","doFunction","App","highlightEdgesConnectedToNode","nodeid","revertEdgesToNormal","addCourse","newnode","newedges","cp","newcourse","console","log","classDataDict","graph","edges","rest","loadCoursesFromData","filein","files","CSVParse","download","skipEmptyLines","complete","results","i","data","row","exportClassDataAsCSV","cid","ExportToCsv","fieldSeparator","filename","generateCsv","events","select","deselectNode","options","layout","hierarchical","enabled","sortMethod","shakeTowards","direction","nodeSpacing","levelSeparation","physics","minVelocity","maxVelocity","hierarchicalRepulsion","centralGravity","Row","Col","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.968f9ce9.chunk.js","sourcesContent":["// makes class data using the json class data object instead of the\r\n// user defined csv\r\n\r\nimport classData from './classData.json';\r\n\r\n// const classData = readFileSync('./classData.json');\r\n\r\n// load classData from file\r\n// const classData = JSON.parse(fs.readFileSync('./data/classData.json').toString());\r\n\r\n// getCourseDetails: get details of course from classData\r\n// returns undefined if subjectCode (or catalogNumber) is undefined in courseData\r\nconst getCourseDetails = (subjectCode, catalogNumber) => {\r\n    // let courseData = classData[subjectCode][catalogNumber];\r\n    // return courseData[Object.keys(courseData)[0]];\r\n    if (! (typeof classData[subjectCode] === 'undefined' || typeof classData[subjectCode][catalogNumber] === 'undefined')) {\r\n        let courseData = classData[subjectCode][catalogNumber];\r\n        return courseData[Object.keys(courseData)[0]];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nconst courseSeasonDict = {\r\n    'F': \"🍁\",\r\n    'W': \"❄️\",\r\n    'S': \"🌷\",\r\n}\r\n\r\n// stringParse(string): takes in a single \"line\" string, parses it; \r\n// ie includes \\n characters every ~50 characters for brevity \r\nfunction stringParse(string) {\r\n    let remainder = string;\r\n    let result = \"\";\r\n    let count = 0; // count: number of chars on the line\r\n\r\n    while (true) {\r\n        if (remainder === \"\") return result;\r\n\r\n        if (count > 50 && remainder.charAt(0) === \" \") {\r\n            result += \"\\n\";\r\n            remainder = remainder.substr(1);\r\n            count = 0;\r\n        }\r\n\r\n        result += remainder.charAt(0);\r\n        remainder = remainder.substr(1);\r\n        count++;\r\n    }\r\n}\r\n\r\n// generateCourseNode: takes in parameters, generates node for course\r\n// that can be used in make-graph.js\r\nfunction generateCourseNode(subjectCode, catalogNumber, courseSeasons) {\r\n\r\n    let courseData = classData[subjectCode][catalogNumber];\r\n    let course = courseData[Object.keys(courseData)[0]];\r\n    // get course seasons\r\n    let symCourseSeasons = courseSeasons\r\n        .map((letter) => { return courseSeasonDict[letter]; })\r\n        .join('');\r\n\r\n    // console.log(courseSeasons);\r\n    // console.log(courseData[Object.keys(courseData)[0]]);\r\n\r\n    const courseNodeDescription =\r\n        `${subjectCode} ${catalogNumber} (${course.title})\\nCourse ID: ${course.id}\\n--------------------------\\n${stringParse(course.description)}\\n--------------------------\\n${(course.requirementsDescription === null) ? \"\" : stringParse(course.requirementsDescription)}\\n`;\r\n    // console.log(courseNodeDescription);\r\n    const courseNodeTitle = (subjectCode === \"HS\") ? subjectCode : `${subjectCode} ${catalogNumber} ${symCourseSeasons}`;\r\n    // console.log(courseNodeTitle);\r\n\r\n    // we can experiment with popups instead of hovering when\r\n    // the node is clicked\r\n    var courseNode = {\r\n        id: `${subjectCode} ${catalogNumber}`,\r\n        label: courseNodeTitle,\r\n        title: courseNodeDescription,\r\n        labelHighLightBold: true,\r\n        borderWidth: 1.5,\r\n        font: {\r\n            face: 'Lato',\r\n            size: 16,\r\n            multi: 'html',\r\n        },\r\n        nodes: {\r\n\r\n        },\r\n        shapeProperties: {\r\n            borderRadius: 2.5,\r\n        }\r\n    }\r\n\r\n    // function to update properties of course node\r\n    let updateCourseNode = function (courseNode, properties) {\r\n        return { ...courseNode, ...properties };\r\n    }\r\n\r\n    // we could make this into a switch statement, or even use a csv\r\n    // to store the properties\r\n    let colorShapeProperties = {};\r\n    // console.log(courseSubject);\r\n    if (subjectCode === \"MATH\") { // green\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#169131',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#81f087',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'diamond',\r\n            size: 15,\r\n        };\r\n    }\r\n    else if (subjectCode === \"STAT\") { // yellow\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#d5db16',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#f7fa8c',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'hexagon',\r\n            size: 15,\r\n        }\r\n    }\r\n    else if (subjectCode === \"CS\") { // orange\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#eb7c28',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#edb68c',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'star',\r\n            size: 15,\r\n        };\r\n    }\r\n    else if (subjectCode === \"CO\") { // aqua\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#0ebfc2',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#63e8eb',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'triangleDown',\r\n            size: 12,\r\n        };\r\n    }\r\n    else if (subjectCode === \"PMATH\") { // pink\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#d40dc0',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#f294e9',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'dot',\r\n            size: 12,\r\n        }\r\n    }\r\n    else if (subjectCode === \"HS\") { // blue\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: 'blue',\r\n                border: 'black',\r\n            },\r\n            shape: 'dot',\r\n            size: 8,\r\n            fixed: true,\r\n        }\r\n    }\r\n    else if (subjectCode === \"SPCOM\" || subjectCode === \"ENGL\") { // purple\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#661499',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#c578f5',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'triangle',\r\n            size: 12,\r\n        }\r\n    }\r\n    else { // red\r\n        colorShapeProperties = {\r\n            color: {\r\n                background: '#a30b2c',\r\n                border: 'black',\r\n                highlight: {\r\n                    background: '#e66e88',\r\n                    border: 'black',\r\n                }\r\n            },\r\n            shape: 'square',\r\n            size: 12,\r\n        };\r\n    }\r\n\r\n    courseNode = updateCourseNode(courseNode, colorShapeProperties);\r\n\r\n    return courseNode;\r\n}\r\n\r\n// generateCourseEdge: generates course edge from a prereq\r\n// course node of the course to the original course\r\nfunction generateCourseEdge(subjectCode, catalogNumber, subjectCodePrereq, catalogNumberPrereq) {\r\n    const courseEdge = {\r\n        id: `${subjectCodePrereq} ${catalogNumberPrereq} -> ${subjectCode} ${catalogNumber}`,\r\n        title: `${subjectCodePrereq} ${catalogNumberPrereq} -> ${subjectCode} ${catalogNumber}`,\r\n        from: `${subjectCodePrereq} ${catalogNumberPrereq}`,\r\n        to: `${subjectCode} ${catalogNumber}`,\r\n        arrows: 'to',\r\n        color: {\r\n            color: '#bdbdbd',\r\n            inherit: 'from',\r\n        },\r\n    }\r\n    return courseEdge;\r\n}\r\n\r\n// parseMyClassNodeData: parses my (ie given) class data, returns list of nodes corresponding to them\r\n// myClassDataDict is in the form { <course code>: { prereqs: <list of course prereqs>, seasons: <list of seasons> } }\r\n// where <course code> = `<subject code> <catalog number>`\r\nfunction parseMyClassNodeData(myClassDataDict) {\r\n    return Object.keys(myClassDataDict).map((c) => {\r\n        return generateCourseNode(c.split(\" \")[0], c.split(\" \")[1], myClassDataDict[c]['seasons']);\r\n    })\r\n}\r\n\r\n// parseMyClassEdgeData: parses my (ie given) class data, returns list of nodes corresponding\r\n// to myClassDataDict, which is in the form described above\r\nfunction parseMyClassEdgeData(myClassDataDict) {\r\n    let parsedEdgeData = [];\r\n    for (let code in myClassDataDict) {\r\n        parsedEdgeData = parsedEdgeData.concat(myClassDataDict[code]['prereqs']\r\n            .map((prereqCode) => {\r\n                return generateCourseEdge(\r\n                    code.split(\" \")[0],\r\n                    code.split(\" \")[1],\r\n                    prereqCode.split(\" \")[0],\r\n                    prereqCode.split(\" \")[1]\r\n                )\r\n            }));\r\n    }\r\n    return parsedEdgeData;\r\n}\r\n\r\n// console.log(parseMyClassEdgeData({\"MATH 135\": [], \"MATH 136\": [\"MATH 135\"], \"MATH 237\": [\"MATH 135\", \"MATH 136\"]}));\r\n\r\nexport { courseSeasonDict, getCourseDetails, generateCourseNode, generateCourseEdge, parseMyClassEdgeData, parseMyClassNodeData };","import React from 'react';\r\nimport { Container, Row, Col, Form, Button, DropdownButton, Dropdown, ToggleButtonGroup, ToggleButton, Table } from \"react-bootstrap\";\r\nimport { courseSeasonDict, getCourseDetails } from \"./parse-data.js\";\r\nimport classData from './classData.json';\r\n\r\n// React component for dropdown menu for \"subject code\"\r\nclass SubjectCodeInput extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                as=\"select\"\r\n                size=\"md\"\r\n                id=\"subjectCode\"\r\n                onChange={this.props.updateSubjectCodeFn}\r\n            >\r\n                {[\"\", ...Object.keys(classData)].sort().map((subjectCode) => <option>{subjectCode}</option>)}\r\n            </Form.Control>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for dropdown menu for \"catalog number\", which is\r\n// based on the subjectCode chosen\r\nclass CatalogNumberInput extends React.Component {\r\n\r\n    makeOption = (subjectCode, catalogNumber) => {\r\n        return <option value={catalogNumber}>\r\n            {catalogNumber} - {(catalogNumber === \"\") ? \"\" : getCourseDetails(subjectCode, catalogNumber).title}\r\n        </option>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                as=\"select\"\r\n                size=\"md\"\r\n                id=\"catalogNumber\"\r\n                onChange={this.props.updateCatalogNumberFn}\r\n            >\r\n                {\r\n                    (this.props.chosenSubjectCode === \"\")\r\n                        ? \"\"\r\n                        : [\"\", ...Object.keys(classData[this.props.chosenSubjectCode])]\r\n                            .sort()\r\n                            .map((catalogNumber) => this.makeOption(this.props.chosenSubjectCode, catalogNumber))\r\n                }\r\n            </Form.Control>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for dropdown menu for \"course preview\", which shows a\r\n// preview of the course\r\nclass CoursePreview extends React.Component {\r\n    render() {\r\n        const courseDetails = getCourseDetails(this.props.subjectCode, this.props.catalogNumber);\r\n        if (typeof courseDetails === 'undefined') {\r\n            return (\r\n                <Button\r\n                    readOnly={true}\r\n                    variant=\"secondary\"\r\n                >\r\n                    Unable to provide a course preview\r\n                </Button>\r\n            )\r\n        }\r\n        return (\r\n            <DropdownButton\r\n                title=\"Click me to see a preview of the course\"\r\n                variant=\"info\"\r\n            >\r\n\r\n                <Dropdown.ItemText>\r\n                    <h5>{this.props.subjectCode} {this.props.catalogNumber}</h5>\r\n                    <h5>{courseDetails.title}</h5>\r\n                    <p>Course ID: {courseDetails.id}</p>\r\n                    <h5>Description</h5>\r\n                    <p>{courseDetails.description}</p>\r\n                    <h5>Requirements</h5>\r\n                    <p>{courseDetails.requirementsDescription}</p>\r\n                </Dropdown.ItemText>\r\n            </DropdownButton>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for course seasons\r\nclass CourseSeasonsInput extends React.Component {\r\n    render() {\r\n        return (\r\n            <ToggleButtonGroup\r\n                type=\"checkbox\"\r\n                onChange={this.props.updateCourseSeasonsFn}\r\n            >\r\n                {\r\n                    Object.keys(courseSeasonDict)\r\n                        .map((letter) =>\r\n                            <ToggleButton\r\n                                inline\r\n                                value={letter}\r\n                                variant=\"light\"\r\n                            >\r\n                                {courseSeasonDict[letter]}\r\n                            </ToggleButton>)\r\n                }\r\n            </ToggleButtonGroup>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for course prerequisites\r\nclass CoursePrerequisitesInput extends React.Component {\r\n    render() {\r\n        return (\r\n            <Form.Control\r\n                type=\"text\"\r\n                id=\"coursePrereqs\"\r\n                placeholder=\"e.g. MATH 136;MATH 138\"\r\n                onChange={this.props.updateCoursePrereqFn}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n// React component for \"Add Course\" button\r\nclass AddCourseButton extends React.Component {\r\n    render() {\r\n        if ((this.props.chosenSubjectCode === \"\") || (this.props.chosenCatalogNumber === \"\")) {\r\n            return (\r\n                <Button\r\n                    variant=\"secondary\"\r\n                >\r\n                    Add Course\r\n                </Button>\r\n            )\r\n        }\r\n        return (\r\n            <Button\r\n                variant=\"primary\"\r\n                onClick={this.props.handleSubmit}\r\n            >\r\n                Add Course\r\n            </Button>\r\n        )\r\n    }\r\n}\r\n\r\n// React component for \"Add Course\" sidebar\r\nclass AddCourseForm extends React.Component {\r\n\r\n    // constructor for add course form\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            subjectCode: \"\",\r\n            catalogNumber: \"\",\r\n            courseSeasons: [],\r\n            coursePrereqs: [],\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    // updates state based on changes to inputs\r\n    handleInputChange = (e) => {\r\n        const target = e.target;\r\n        const value = [\"subjectCode\", \"catalogNumber\"].includes(target.value)\r\n            ? target.value\r\n            : target.value.split(\";\").filter(x => x);\r\n        this.setState({\r\n            [target.id]: value\r\n        });\r\n    }\r\n\r\n    // for the section where user adds course data manually\r\n    handleSubmit = () => this.props.doFunctionAfterSubmitManual(this.state);\r\n\r\n    // for the section where user adds course data using a csv\r\n    loadClassDataFile = this.props.doFunctionAfterSubmitCSV;\r\n\r\n    // makes preview of course\r\n    makePreview = (subjectCode, catalogNumber) => {\r\n        try {\r\n            // return generateCourseNode(subjectCode, catalogNumber, courseSeasons).title;\r\n            let courseData = classData[subjectCode][catalogNumber];\r\n            let course = courseData[Object.keys(courseData)[0]];\r\n            return (\r\n                <Container fluid>\r\n                    <h6>{subjectCode} {catalogNumber} ({course.title})</h6>\r\n                    <p>Course ID: {course.id}</p>\r\n                    <p>{course.description}</p>\r\n                    <p>{course.requirementsDescription}</p>\r\n                </Container>\r\n            )\r\n        } catch (err) {\r\n            return \"Invalid course data; please check that all input fields are formatted correctly\";\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <h4>Add Course</h4>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Subject Code</Form.Label>\r\n                        <SubjectCodeInput\r\n                            updateSubjectCodeFn={(e) => this.setState({ subjectCode: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Catalog Number</Form.Label>\r\n                        <CatalogNumberInput\r\n                            chosenSubjectCode={this.state.subjectCode}\r\n                            updateCatalogNumberFn={(e) => this.setState({ catalogNumber: e.target.value })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <CoursePreview\r\n                            subjectCode={this.state.subjectCode}\r\n                            catalogNumber={this.state.catalogNumber}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Seasons course offered</Form.Label>\r\n                        <CourseSeasonsInput\r\n                            updateCourseSeasonsFn={(seasons) => this.setState({ courseSeasons: seasons })}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Course Prerequisites</Form.Label>\r\n                        <CoursePrerequisitesInput\r\n                            updateCoursePrereqFn={(e) => this.setState({\r\n                                coursePrereqs: e.target.value\r\n                                    .split(\";\")\r\n                                    .map((course) => course.trim())\r\n                            })}\r\n                        />\r\n                    </Form.Group>\r\n                    <AddCourseButton \r\n                        chosenSubjectCode={this.state.subjectCode}\r\n                        chosenCatalogNumber={this.state.catalogNumber}\r\n                        handleSubmit={() => this.props.doFunctionAfterSubmitManual(this.state)}\r\n                    />\r\n                    <Form.Group>\r\n                        <Form.Label>Or alternatively, import class data via a CSV:</Form.Label>\r\n                        <Form.File\r\n                            id=\"classDataFile\"\r\n                            onChange={this.loadClassDataFile}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddCourseForm;","// Constructs the React Application\r\n\r\nimport { ExportToCsv } from \"export-to-csv\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport Graph from \"react-graph-vis\";\r\nimport { parse as CSVParse } from \"papaparse\";\r\n\r\nimport AddCourseForm from './AddCourseForm';\r\n\r\nimport { generateCourseNode, generateCourseEdge, parseMyClassEdgeData, parseMyClassNodeData } from './parse-data.js';\r\nimport { colorLuminance } from './lighten-color.js';\r\n\r\n// React Component to export class data as CSV\r\nclass ExportClassData extends React.Component {\r\n\r\n  doFunction = this.props.doFunction;\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Button variant=\"primary\" onClick={this.doFunction}>\r\n          Export Class Data as CSV\r\n        </Button>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n// React Component for the graph (ie \"My Network\")\r\nclass App extends React.Component {\r\n\r\n  // initial dict for class data\r\n  myClassDataDict = {\r\n    // test data\r\n    // \"MATH 135\": { \"prereqs\": [], \"seasons\": [\"F\", \"W\", \"S\"] },\r\n    // \"MATH 136\": { \"prereqs\": [\"MATH 135\"], \"seasons\": [\"F\", \"W\", \"S\"] },\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      classDataDict: this.myClassDataDict,\r\n      graph: {\r\n        nodes: parseMyClassNodeData(this.myClassDataDict),\r\n        edges: parseMyClassEdgeData(this.myClassDataDict),\r\n      },\r\n      events: {\r\n        // when selecting a node, \"highlight\" the edges connected to it\r\n        select: ({ nodes, edges }) => {\r\n          this.highlightEdgesConnectedToNode(nodes[0]);\r\n        },\r\n        // when deselecting a node, \"revert\" the \"selected\" edges to \"normal\"\r\n        deselectNode: ({ ...other }) => {\r\n          this.revertEdgesToNormal();\r\n        },\r\n        // stabilized: ({ iterations }) => {\r\n        //   console.log(iterations);\r\n        //   this.setState(({options, ...rest}) => {\r\n        //     return {\r\n        //       options,\r\n        //       ...rest\r\n        //     }\r\n        //   })\r\n        // }\r\n      },\r\n      options: {\r\n        layout: {\r\n          hierarchical: {\r\n            enabled: true,\r\n            sortMethod: 'directed',\r\n            shakeTowards: 'roots',\r\n            direction: 'LR',\r\n            nodeSpacing: 150,\r\n            levelSeparation: 280,\r\n          },\r\n        },\r\n        nodes: {\r\n          font: {\r\n            multi: 'html',\r\n          },\r\n        },\r\n        // physics: false,\r\n        physics: {\r\n          enabled: true,\r\n          minVelocity: 0.05,\r\n          maxVelocity: 30,\r\n          hierarchicalRepulsion: {\r\n            centralGravity: 1,\r\n          },\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  // highlightEdgesConnectedToNode: highlights edges connected to node (when it is clicked)\r\n  highlightEdgesConnectedToNode = (nodeid) => {\r\n\r\n    // we do nothing for now, since I do not know how to make the simulation\r\n    // \"stop\" when I click the node\r\n\r\n    // // luminosity constants for how dark/light to make the edges when node clicked\r\n    // const fromLum = -0.4;\r\n    // const toLum = 0;\r\n\r\n    // this.setState(({ options, graph: { nodes, edges }, ...rest }) => {\r\n    //   // get clickedNode based on nodeid (match node id with nodeid)\r\n    //   let clickedNode = nodes.filter((node) => (node.id === nodeid))[0];\r\n    //   // get edges connected to clickedNode, and the \"other\" edges not connected to clickedNode\r\n    //   let fromEdges = edges.filter((edge) => (edge.from === nodeid));\r\n    //   let toEdges = edges.filter((edge) => (edge.to === nodeid));\r\n    //   let otherEdges = edges.filter((edge) => !((edge.to === nodeid) || (edge.from === nodeid)));\r\n    //   // color outgoing and incoming arrows\r\n    //   return {\r\n    //     options,\r\n    //     graph: {\r\n    //       nodes,\r\n    //       edges: otherEdges\r\n    //         .concat(fromEdges.map((fromEdge) => {\r\n    //           return {\r\n    //             ...fromEdge,\r\n    //             width: 2,\r\n    //             color: colorLuminance(clickedNode.color.background, fromLum),\r\n    //           }\r\n    //         }))\r\n    //         .concat(toEdges.map((toEdge) => {\r\n    //           return {\r\n    //             ...toEdge,\r\n    //             width: 2,\r\n    //             color: colorLuminance(clickedNode.color.background, toLum),\r\n    //           }\r\n    //         })),\r\n    //     },\r\n    //     ...rest\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  // revert edges back to normal (ie turn them all back to light grey)\r\n  revertEdgesToNormal = () => {\r\n\r\n    // we do nothing for now, since I do not know how to make the simulation\r\n    // \"stop\" when I click the node\r\n\r\n    // this.setState(({ graph: { nodes, edges }, ...rest }) => {\r\n    //   return {\r\n    //     graph:\r\n    //     {\r\n    //       nodes,\r\n    //       edges: edges.map((edge) => {\r\n    //         return {\r\n    //           ...edge, \r\n    //           color: '#bdbdbd',\r\n    //           width: 1,\r\n    //         }\r\n    //       })\r\n    //     },\r\n    //     ...rest\r\n    //   };\r\n    // });\r\n  };\r\n\r\n  // add course when \"Add Course\" button clicked\r\n  addCourse = (state) => {\r\n    const { subjectCode, catalogNumber, courseSeasons, coursePrereqs } = state;\r\n    const newnode = generateCourseNode(subjectCode, catalogNumber, courseSeasons);\r\n    const newedges = coursePrereqs.map((cp) => generateCourseEdge(subjectCode, catalogNumber, cp.split(\" \")[0], cp.split(\" \")[1]));\r\n    const newcourse = { [subjectCode + \" \" + catalogNumber]: { \"seasons\": courseSeasons, \"prereqs\": coursePrereqs } };\r\n    console.log(newcourse);\r\n    this.setState(({ classDataDict, graph: { nodes, edges }, ...rest }) => {\r\n      return {\r\n        classDataDict: {\r\n          ...classDataDict,\r\n          ...newcourse\r\n        },\r\n        graph: {\r\n          nodes: [\r\n            ...nodes,\r\n            newnode\r\n          ],\r\n          edges: [\r\n            ...edges,\r\n            ...newedges\r\n          ],\r\n        },\r\n        ...rest\r\n      };\r\n    });\r\n  };\r\n\r\n  // load course data when CSV with class data is uploaded\r\n  loadCoursesFromData = (e) => {\r\n    let filein = e.target.files[0];\r\n    CSVParse(filein, {\r\n      download: true,\r\n      skipEmptyLines: true,\r\n      complete: (results) => {\r\n        this.myClassDataDict = {};\r\n        for (let i in results.data) {\r\n          let row = results.data[i];\r\n          if (typeof row[0] !== 'undefined') {\r\n            this.myClassDataDict[`${row[0]} ${row[1]}`] = {\r\n              'seasons': row[2].split(\";\").filter(x => x),\r\n              'prereqs': row[3].split(\";\").filter(x => x),\r\n            };\r\n          }\r\n        }\r\n        console.log(this.myClassDataDict);\r\n        this.setState(({ classDataDict, graph: { nodes, edges }, ...rest }) => {\r\n          return {\r\n            classDataDict: this.myClassDataDict,\r\n            graph: {\r\n              nodes: parseMyClassNodeData(this.myClassDataDict),\r\n              edges: parseMyClassEdgeData(this.myClassDataDict),\r\n            },\r\n            ...rest\r\n          }\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  exportClassDataAsCSV = () => {\r\n    console.log(this.state.classDataDict);\r\n    const data = Object.keys(this.state.classDataDict)\r\n      .map((cid) => [\r\n        cid.split(\" \")[0],\r\n        cid.split(\" \")[1],\r\n        this.state.classDataDict[cid][\"seasons\"].join(\";\"),\r\n        this.state.classDataDict[cid][\"prereqs\"].join(\";\")\r\n      ]);\r\n\r\n    console.log(data);\r\n    const csvExporter = new ExportToCsv({\r\n      fieldSeparator: ',',\r\n      filename: 'classData',\r\n      title: 'Class Data',\r\n    });\r\n    csvExporter.generateCsv(data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container id=\"App\">\r\n        <h1 id=\"heading\">My Course Graph</h1>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={8}>\r\n              <Container id=\"mynetwork\">\r\n                <Graph graph={this.state.graph} options={this.state.options} events={this.state.events} />\r\n              </Container>\r\n              {/* <MyNetwork /> */}\r\n            </Col>\r\n            <Col lg={4}>\r\n              <AddCourseForm\r\n                doFunctionAfterSubmitManual={this.addCourse}\r\n                doFunctionAfterSubmitCSV={this.loadCoursesFromData}\r\n              />\r\n              <ExportClassData\r\n                doFunction={this.exportClassDataAsCSV}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}